{"version":3,"sources":["lib/client-websocket-wrapper/index.js","lib/client-websocket-wrapper/emitter.js","Header/Menu/index.tsx","Header/index.tsx","DisplayMsg/index.tsx","hooks/index.ts","lib/index.ts","lib/enum.ts","query/index.ts","Login/index.tsx","Main/scrabble/Player/index.tsx","Main/scrabble/ScoreBoard/index.tsx","Main/scrabble/ScrabbleBoard/BlockSlot/index.tsx","Main/scrabble/ScrabbleBoard/ScrabbleActionBtn/index.tsx","Main/scrabble/ScrabbleBoard/LetterTile/index.tsx","Main/scrabble/ScrabbleBoard/MessageDialog/index.tsx","Main/scrabble/ScrabbleBoard/index.tsx","declaration/index.ts","Main/scrabble/ScrabbleBag/index.tsx","Main/scrabble/Dictionary/index.tsx","Main/Modal/index.tsx","Main/scrabble/Prize/PrizeItem/index.tsx","Main/scrabble/Prize/index.tsx","Main/scrabble/index.tsx","Main/FrontPage/index.tsx","Main/StartNewGame/index.tsx","Main/NewPlayerJoinGame/index.tsx","Main/JoinGameTimeout/index.tsx","Main/JoinGame/index.tsx","Main/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__importDefault","mod","__esModule","defineProperty","exports","value","WebSocketWrapper","_super","_this","call","closed","connection","timeout","totalReconnectionAttempt","connect","url","retryConnectionTimeoutInSecs","reConnectionAttempt","secure","window","location","hostname","port","WebSocket","addEventListener","EVENT_TYPE","OPEN","event","clearTimeout","emit","CLOSE","setTimeout","ERROR","error","MESSAGE","payload","JSON","parse","data","e","MSG_ERROR","close","code","reason","send","eventType","receivers","readyState","Error","stringify","isClosed","getTotalReconnectionAttempt","READY_STATE","CONNECTING","CLOSING","CLOSED","require","default","Emitter","handlerContainers","handler","push","_a","args","_i","arguments","length","isArray","i","apply","removeEventListener","filter","h","Menu","isOnline","username","handleLogOut","useState","toggle","setToggle","className","style","position","src","alt","onClick","t","display","borderBottom","cursor","Header","loggedIn","DisplayMsg","msg","type","color","backgroundColor","doQuery","uri","option","setResponse","ignoreResultRef","reQuery","fetch","then","response","ok","json","status","statusText","current","loading","catch","console","MAX_USERNAME_LEN","MIN_USERNAME_LEN","ENV","indexUrl","protocol","wsUrl","getRequestOption","method","credentials","mode","getElementPosition","el","x","y","tagName","toLowerCase","xScroll","scrollLeft","document","documentElement","yScroll","scrollTop","offsetLeft","clientLeft","offsetTop","clientTop","offsetParent","generateUniqueID","Math","random","toString","getPlayerOfflineMsg","offlinePlayers","join","ROUTES","URL","viewer","login","logOut","Login","updateUsername","setUsername","errorMsg","setErrorMsg","mutate","useCallback","result","useMutation","message","action","onSubmit","preventDefault","test","validateUsername","requestOpt","query","headers","body","success","htmlFor","name","onChange","target","trim","slice","marginLeft","padding","borderRadius","Player","score","isCurrentPlayer","tick","width","marginBottom","border","flexBasis","height","top","flex","st","textAlign","ScoreBoard","playerInputTracker","boxShadow","map","index","player","point","word","marginTop","key","BoardSlot","text","rowIndex","columnIndex","hovering","resetTilePosOnBoard","tileID","children","_scrollTop","addShadow","boardCellRef","useRef","useEffect","userSelect","ref","lineHeight","SIZE","borderTop","borderRight","borderLeft","ScrabbleActionButton","maxWidth","handleSubmitTile","handlePass","disableBtn","submitTileRef","passRef","id","blur","disabled","float","MovableLetterTile","tile","pos","handleSetSelectedTile","zIndex","boardCellPos","justPlayedTile","left","onMouseDown","diff","clientX","clientY","marginRight","letter","UnMovableLetterTile","MessageDialog","handleHideDialog","hide","timeoutID","fontFamily","paddingTop","boxSizing","boardArray","boardBlockColour","TW","TL","DW","DL","CE","resetTilesPosOnRack","prevTilesWithPos","startLeftPos","startTopPos","sort","a","a1","b1","counter","tp","setDialogHelper","dialog","pauseDialogMsg","getScrollTop","parentElement","floor","MEDAL_TYPE","ScrabbleBoard","tiles","arePlayerOffline","currentPlayerID","ws","passed","defTileBoardCellPos","dialogs","setDialogs","gamePaused","pauseOrResumeGame","tileBoardCellPos","setTileBoardCellPos","size","setSize","selectedTile","setSelectedTile","tilesWithPos","setTilesWithPos","setScrollTop","boardRef","thisRef","boardSize","boundaryX","boundaryY","moveTiles","boardPos","cellSize","tileToPutOnBoardCell","alreadyInPositionTiles","prevSelectedTileBoardCellPos","playedTilesBoardCellPos","waitForServer","prevPos","dialogMsgID","onResize","clientWidth","clientHeight","innerWidth","innerHeight","getViewport","handleOnScroll","onMoveTile","log","prev","prevTileBoardPos","Number","isInteger","onTileInputError","PrevDialogs","onBoardCellOcuppied","onPass","forEach","onPauseGame","onResumeGame","prevDialog","onRemoveTileFromBoardDueToPlayerError","prevTileBoardCellPos","boardCoord","onPlayerDisconnectDuringGame","newOfflinePlayer","dialogMsg","prevDialogs","tileBoardCells","keys","tileBoardCell","tempTileObject","permanentTileBoardCellPos","c","prevTileBoardCells","onSetSelectedTile","titleID","hideDialogMsg","dialogID","selectedTileBoardPos","tileToReposition","playedTileIDs","values","tilesReactNode","prevCellPosX","prevCellPosY","toBeSentTileBoardPos","tID","indexOf","onMouseMove","yRow","round","xColumn","onMouseUp","gridGap","gridTemplateColumns","gridTemplateRows","boardRow","undefined","ScrabbleBag","totalTileInBag","fontSize","fontWeight","ACTION_TYPE","alphabeltReg","Dictionary","handleToggleDict","setWord","isTyping","setIsTyping","output","setOutput","inputRef","onSearchWord","searchWord","w","matchList","l","f","split","_timeout","focus","placeholder","onKeyUp","toLocaleLowerCase","autoFocus","div","createElement","Modal","useLayoutEffect","modalRoot","getElementById","appendChild","removeChild","createPortal","PrizeItem","prizeAvatarUrl","avatarAlt","medalType","GOLD","SILVER","margin","Medals","BRONZE","Prize","players","goBackToHomePage","medalStore","twoPlayerWidth","Scrabble","defTick","defTiles","defGenInfo","myUsername","setTick","genInfo","genInfoAndTiles","setGenInfoAndTiles","toggleDict","setToggleDict","playerPosition","setPlayerPosition","showMsgRef","onClockTick","onNextTurn","gamePayload","showMsg","onGameOver","prevToggleDict","lastWords","FrontPage","changeRoute","stateMsg","setStateMsg","StartNewGame","numPlayer","setNumPlayer","errored","setErrored","onGenerateGameSessionOffer","gameSessionID","s","n","parseInt","NewUserJoinGame","joinPlayer","JoinGameTimeout","joinGameList","setJoinGameList","newUserJoinGame","justJoined","u","prevJoinList","concat","onPlayGameRejection","onPlayerDisconnectBeforeGameStart","playerID","JoinGame","setGameSessionID","joinGameRef","joinGameResponse","m","alreadyJoinList","joinList","onCancelOfferToPlay","g","history","createBrowserHistory","Main","setIsOnline","path","route","setRoute","msgDialog","setMsgDialog","alreadyConnectedAndLoggedOut","replace","unlisten","listen","pathname","state","stump","App","useQuery","Boolean","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25b587fa.chunk.js","sourcesContent":["\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar emitter_1 = __importDefault(require(\"./emitter\"));\r\nvar WebSocketWrapper = /** @class */ (function (_super) {\r\n    __extends(WebSocketWrapper, _super);\r\n    function WebSocketWrapper() {\r\n        var _this = _super.call(this) || this;\r\n        _this.closed = false;\r\n        _this.connection = null;\r\n        _this.timeout = null;\r\n        _this.totalReconnectionAttempt = 0;\r\n        return _this;\r\n    }\r\n    WebSocketWrapper.prototype.connect = function (url, retryConnectionTimeoutInSecs, reConnectionAttempt, secure) {\r\n        var _this = this;\r\n        if (retryConnectionTimeoutInSecs === void 0) { retryConnectionTimeoutInSecs = 0; }\r\n        if (reConnectionAttempt === void 0) { reConnectionAttempt = 5; }\r\n        if (secure === void 0) { secure = false; }\r\n        url = (url && url !== \"\"\r\n            ? url\r\n            : ((secure ? \"wss\" : \"ws\") + \"://\" + window.location.hostname + \":\" + window.location.port));\r\n        this.connection = new WebSocket(url);\r\n        this.connection.addEventListener(WebSocketWrapper.EVENT_TYPE.OPEN, function (event) {\r\n            //if currently set, it means client try to reconnect after disconnect from server\r\n            if (_this.timeout) {\r\n                //no need to retry again\r\n                clearTimeout(_this.timeout);\r\n            }\r\n            //number of time client try to reconnect to the server\r\n            _this.totalReconnectionAttempt = 0;\r\n            //connection.send(msg.value);\r\n            _this.emit(WebSocketWrapper.EVENT_TYPE.OPEN, event);\r\n        });\r\n        this.connection.addEventListener(WebSocketWrapper.EVENT_TYPE.CLOSE, function (event) {\r\n            _this.emit(WebSocketWrapper.EVENT_TYPE.CLOSE, event);\r\n            //if connection was lost and client didn't log him or her self out \r\n            //try to reconnect again\r\n            if (retryConnectionTimeoutInSecs > 0 && !_this.closed && (reConnectionAttempt > 0 || reConnectionAttempt === -1) && !_this.timeout) {\r\n                //increment number of time client try to reconnect\r\n                _this.totalReconnectionAttempt++;\r\n                //console.info(\"trying to reconnect...\");\r\n                _this.timeout = setTimeout(function () {\r\n                    _this.connect(url, retryConnectionTimeoutInSecs, (reConnectionAttempt === -1 ? (reConnectionAttempt) : (reConnectionAttempt > 0 ? (reConnectionAttempt - 1) : 0)));\r\n                    _this.timeout = null;\r\n                }, (retryConnectionTimeoutInSecs * 1000));\r\n            }\r\n            _this.connection = null;\r\n        });\r\n        this.connection.addEventListener(WebSocketWrapper.EVENT_TYPE.ERROR, function (error) {\r\n            _this.emit(WebSocketWrapper.EVENT_TYPE.ERROR, error);\r\n        });\r\n        //when message is sent from the server\r\n        this.connection.addEventListener(WebSocketWrapper.EVENT_TYPE.MESSAGE, function (event) {\r\n            var payload = null;\r\n            var error = null;\r\n            try {\r\n                payload = JSON.parse(event.data);\r\n            }\r\n            catch (e) {\r\n                error = e;\r\n            }\r\n            if (error) {\r\n                _this.emit(WebSocketWrapper.EVENT_TYPE.MSG_ERROR, error);\r\n            }\r\n            else if (payload) {\r\n                //the event type is at index 0 of payload array\r\n                //the actuall data is at index 1\r\n                _this.emit(payload[0], payload[1]);\r\n            }\r\n        });\r\n        return this;\r\n    }; //end function connect\r\n    WebSocketWrapper.prototype.close = function (code, reason) {\r\n        if (code === void 0) { code = 1000; }\r\n        if (reason === void 0) { reason = \"\"; }\r\n        //if in the process of reconnecting\r\n        if (this.timeout) {\r\n            //stop reconnecting cos client decided to log out\r\n            clearTimeout(this.timeout);\r\n            //set to null\r\n            this.timeout = null;\r\n        }\r\n        if (this.connection) {\r\n            this.connection.close(code, reason);\r\n            this.connection = null;\r\n        }\r\n        //don't attempt to reconnect\r\n        this.closed = true;\r\n    }; //end close method\r\n    WebSocketWrapper.prototype.send = function (eventType, data, receivers) {\r\n        //if connection is still active\r\n        if (this.connection && this.connection.readyState === WebSocket.OPEN) {\r\n            //stringify message to send to server\r\n            var payload = JSON.stringify([eventType, data, receivers]);\r\n            //debug\r\n            //send payload to server to be sent to receiver\r\n            this.connection.send(payload);\r\n        } //end if\r\n        //if connection is closed throw error to caller\r\n        else {\r\n            throw new Error(\"Connection is closed\");\r\n        }\r\n    };\r\n    /**\r\n     * @description return true if websocket connection is closed else return true\r\n     */\r\n    WebSocketWrapper.prototype.isClosed = function () {\r\n        return this.connection && this.connection.readyState === WebSocket.OPEN ? false : true;\r\n    };\r\n    /**\r\n     * @description get the number of time ws try to reconnect to the server\r\n     */\r\n    WebSocketWrapper.prototype.getTotalReconnectionAttempt = function () {\r\n        return this.totalReconnectionAttempt;\r\n    };\r\n    WebSocketWrapper.READY_STATE = {\r\n        CONNECTING: 0,\r\n        OPEN: 1,\r\n        CLOSING: 2,\r\n        CLOSED: 3\r\n    };\r\n    // static readonly TYPE :{[index:string]:string} = {\r\n    //   CLOSE:\"close\",\r\n    //   ERROR:\"error\"\r\n    // };\r\n    WebSocketWrapper.EVENT_TYPE = {\r\n        OPEN: \"open\",\r\n        CLOSE: \"close\",\r\n        ERROR: \"error\",\r\n        MESSAGE: \"message\",\r\n        MSG_ERROR: \"0\"\r\n    };\r\n    return WebSocketWrapper;\r\n}(emitter_1.default)); //end class\r\nexports.default = WebSocketWrapper;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Emitter = /** @class */ (function () {\r\n    function Emitter() {\r\n        this.handlerContainers = {};\r\n    }\r\n    Emitter.prototype.addEventListener = function (eventType, handler) {\r\n        if (this.handlerContainers[eventType]) {\r\n            this.handlerContainers[eventType].push(handler);\r\n        }\r\n        else {\r\n            this.handlerContainers[eventType] = [handler];\r\n        }\r\n        return this;\r\n    };\r\n    Emitter.prototype.emit = function (eventType) {\r\n        var _a;\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.handlerContainers[eventType])) {\r\n            for (var i = 0; i < this.handlerContainers[eventType].length; i++) {\r\n                (_a = this.handlerContainers[eventType])[i].apply(_a, args);\r\n            }\r\n        }\r\n    };\r\n    Emitter.prototype.removeEventListener = function (eventType, handler) {\r\n        if (Array.isArray(this.handlerContainers[eventType])) {\r\n            this.handlerContainers[eventType] = this.handlerContainers[eventType].filter(function (h) { return h !== handler; });\r\n        }\r\n        return this;\r\n    }; //end method removeEventListener\r\n    return Emitter;\r\n}());\r\nexports.default = Emitter;\r\n","import React, { useState } from 'react'\r\n\r\ninterface Props {\r\n  isOnline:boolean,\r\n  username:string,\r\n  handleLogOut:(evt:React.MouseEvent<HTMLLIElement, MouseEvent>)=>void,\r\n}\r\n\r\nexport const Menu:React.FC<Props> = ({isOnline, username, handleLogOut}) => {\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  return (\r\n    <div className=\"status\" style={{position:\"relative\"}}>\r\n      <img \r\n        src=\"./img/avatar/default-avatar.jpg\" \r\n        alt=\"avatar\" \r\n        className={`avatar ${isOnline ? \"is-online\" : \"is-offline\"}`}\r\n        onClick={()=>setToggle(t=>!t)}\r\n      />\r\n      <ul className=\"menu\" style={{display:toggle ? \"block\" : \"none\"}}>\r\n        <li className=\"word-wrap-up\" style={{ borderBottom:\"solid 1px #000\", cursor:\"default\"}}>&#9977; {username}</li>\r\n        <li style={{cursor:\"pointer\"}} onClick={handleLogOut}>Log Out</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport \"./index.css\";\r\nimport { Menu } from './Menu';\r\n\r\ninterface Props {\r\n  isOnline:boolean,\r\n  loggedIn:boolean,\r\n  handleLogOut:(evt:React.MouseEvent<HTMLLIElement, MouseEvent>)=>void,\r\n  username?:string\r\n}\r\n\r\nexport const Header:React.FC<Props> = ({isOnline, loggedIn, handleLogOut, username=\"\"}) => {\r\n  return (\r\n    <header>\r\n      Play Scrabble.Com\r\n      {\r\n        loggedIn ? (\r\n          <Menu isOnline={isOnline} username={username} handleLogOut={handleLogOut}/>\r\n        ) : null\r\n      }\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport \"./index.css\";\r\nimport {MsgType} from \"../declaration\";\r\n\r\ninterface Props {\r\n  msg:string,\r\n  type:MsgType,\r\n}\r\n\r\n\r\nexport const DisplayMsg : React.FC<Props> = ({msg, type}) => {\r\n\r\n  let color = \"#f44949\";\r\n\r\n  if(type === \"INFO\"){\r\n    color = \"#b8f7ee\";\r\n  }\r\n  else if(type === \"WARNING\"){\r\n    color = \"#ff9900\";\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"error\" \r\n      style={{backgroundColor : color}}\r\n    >\r\n      {\r\n        msg\r\n      }\r\n    </div>\r\n  );\r\n}","import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport {RequestOption, QueryResponse, DoQuery, MutationResponse} from \"../declaration\";\r\n\r\nconst doQuery:DoQuery = (uri, option, setResponse, ignoreResultRef, reQuery)=>{\r\n  fetch(uri, option)\r\n  .then(response=>{\r\n    //if response is ok\r\n    if(response.ok){\r\n      return response.json();\r\n    }\r\n    \r\n    throw new Error(\r\n      response.status === 404 \r\n      ? \"Not Found\" \r\n      : (\r\n        response.status === 500 \r\n        ? response.statusText\r\n        : \"Internal Server Error\"\r\n      )\r\n    );\r\n  })\r\n  .then(data=>{\r\n    if(!ignoreResultRef.current){\r\n      setResponse({loading:false, data, error:null, reQuery});\r\n    }\r\n  })\r\n  .catch(error=>{\r\n    console.error(error);\r\n    setResponse({loading:false, data:null, error, reQuery})\r\n  });\r\n}\r\n\r\nexport function useQuery(\r\n  uri:string, \r\n  option:RequestOption={}\r\n) :[QueryResponse, React.Dispatch<React.SetStateAction<QueryResponse>>]{\r\n  //lemme know if the component is already unmounted, we need to ignore the result of the query\r\n  const ignoreResultRef = useRef(false);\r\n  //if there is a need to refetch the query, this function will do the trick\r\n  \r\n  const reQuery = useCallback((uri, option)=>{\r\n    doQuery(uri, option, setResponse, ignoreResultRef, reQuery);\r\n  }, []);\r\n\r\n  //set state\r\n  const [response, setResponse] = useState<QueryResponse>({\r\n    loading:true, data:null, error:null, reQuery\r\n  });\r\n  //deferuntil the component has mounted\r\n  useEffect(()=>{\r\n    doQuery(uri, option, setResponse, ignoreResultRef, reQuery);\r\n    return ()=>{\r\n      ignoreResultRef.current = true;\r\n    }\r\n  }, [uri, option, reQuery]);\r\n\r\n  return [response, setResponse];\r\n}\r\n\r\nexport function useMutation(uri:string) : [\r\n  MutationResponse, (option:RequestOption)=>Promise<MutationResponse>\r\n]{\r\n  const [response, setResponse] = useState<MutationResponse>({loading:false, data:null, error:null});\r\n  \r\n  const mutate = useCallback((option)=>{\r\n    return fetch(uri, option)\r\n    .then(response=>{\r\n      //if response is ok\r\n      if(response.ok){\r\n        return response.json();\r\n      }\r\n      \r\n      throw new Error(\r\n        response.status === 404 \r\n        ? \"Not Found\" \r\n        : (\r\n          response.status === 500 \r\n          ? response.statusText\r\n          : \"Internal Server Error\"\r\n        )\r\n      );\r\n    })\r\n    .then(data=>{\r\n      //setUsername(event.target.value);\r\n      const result:MutationResponse = {loading:false, data, error:null}\r\n      setResponse(result);\r\n      return result;\r\n    })\r\n    .catch(error=>{\r\n      console.error(error);\r\n      setResponse({loading:false, data:null, error})\r\n      throw error;\r\n    });\r\n  }, [uri]);\r\n  return [response, mutate];\r\n} ","import { RequestOption, METHOD } from '../declaration'\r\n\r\nexport const SIZE:number = 15;\r\n\r\nexport const MAX_USERNAME_LEN = 12;\r\nexport const MIN_USERNAME_LEN = 3;\r\n\r\nexport const ENV:string = \"development\";\r\n\r\nexport const indexUrl:string = ENV === \"development\" \r\n? `${window.location.protocol}//${window.location.hostname}:3001`\r\n: `${window.location.protocol}//${window.location.hostname}:${window.location.port}`;\r\n\r\nexport const wsUrl:string = ENV === \"development\" \r\n? `ws://${window.location.hostname}:3001`\r\n: `ws://${window.location.hostname}:${window.location.port}`\r\n\r\n\r\nexport function getRequestOption(method:METHOD) :RequestOption{\r\n  return {\r\n    credentials:\"include\", method,\r\n    mode: ENV === \"development\" ? \"cors\" : \"same-origin\"\r\n  };\r\n}\r\n\r\nexport function getElementPosition(el:any) :{x:number, y:number}{ \r\n  let x = 0, y = 0;\r\n  while(el){\r\n    if(el.tagName.toLowerCase() === \"body\"){\r\n      const xScroll = el.scrollLeft || document.documentElement.scrollLeft;\r\n      const yScroll = el.scrollTop || document.documentElement.scrollTop;\r\n      x += (el.offsetLeft - xScroll + el.clientLeft);\r\n      y += (el.offsetTop - yScroll + el.clientTop);\r\n    }else{\r\n      x += (el.offsetLeft - el.scrollLeft + el.clientLeft);\r\n      y += (el.offsetTop - el.scrollTop + el.clientTop);\r\n    }\r\n    el = el.offsetParent;\r\n  }//end while loop\r\n  return {x, y};\r\n}//end function\r\n\r\nexport function getViewport() :{width:number, height:number}{\r\n  \r\n  if (!('innerWidth' in window ) ){\r\n    const body = document.documentElement || document.body;\r\n    return {\r\n      width:body.clientWidth,\r\n      height:body.clientHeight\r\n    }\r\n  }\r\n  \r\n  return {\r\n    width:window.innerWidth,\r\n    height:window.innerHeight\r\n  };\r\n}\r\n\r\nexport function generateUniqueID() :string{\r\n  return (Math.random() * Math.random() * Math.random()).toString(16);\r\n}\r\n\r\nexport function getPlayerOfflineMsg(offlinePlayers :string[]) :string{\r\n  if(offlinePlayers.length < 1) return \"\";\r\n  \r\n  return (\r\n    offlinePlayers.length > 1 \r\n    ? `${offlinePlayers.join(\", \")} are offline, game paused`\r\n    : `${offlinePlayers[0]} is offline, game paused`\r\n  );\r\n}","export const EVENT_TYPE :{\r\n  readonly ALREADY_CONNECTED:string, \r\n  readonly GENERATE_GAME_SESSION_OFFER_ID:string,\r\n  readonly MSG_ERROR:string,\r\n  readonly CANCEL_OFFER_TO_PLAY:string,\r\n  readonly JOIN_GAME:string,\r\n  readonly JOIN_GAME_RESPONSE:string,\r\n  readonly JUST_JOINED_GAME : string,\r\n  readonly ALREADY_JOINED_GAME:string,\r\n  readonly START_GAME:string,\r\n  readonly CLOCK_TICK:string,\r\n  readonly NEXT_TURN:string,\r\n  readonly PLAYER_DISCONNECT_BEFORE_START:string,\r\n  readonly PLAYER_DISCONNECT_DURING_GAME:string,\r\n  readonly MOVE_TILE:string,\r\n  readonly TILE_INPUT_ERROR:string,\r\n  readonly SUBMIT_TILE:string,\r\n  readonly PASS:string,\r\n  readonly BOARD_CELL_OCCUPIED:string,\r\n  readonly PAUSE_GAME:string,\r\n  readonly RESUME_GAME:string,\r\n  readonly SEARCH_DICT:string,\r\n  readonly GAME_OVER:string,\r\n  readonly REMOVE_TILE_FROM_BOARD:string,\r\n  readonly JOIN_GAME_AFTER_DISCONNECT:string,\r\n  readonly I_JOIN_GAME_AFTER_DISCONNECT:string,\r\n} = {\r\n  MSG_ERROR:\"0\",\r\n  ALREADY_CONNECTED:\"1\",\r\n  GENERATE_GAME_SESSION_OFFER_ID:\"2\",\r\n  CANCEL_OFFER_TO_PLAY:\"3\",\r\n  JOIN_GAME :\"4\",\r\n  JOIN_GAME_RESPONSE:\"5\",\r\n  JUST_JOINED_GAME:\"6\",\r\n  ALREADY_JOINED_GAME:\"7\",\r\n  START_GAME:\"8\",\r\n  CLOCK_TICK:\"9\",\r\n  NEXT_TURN:\"10\",\r\n  PLAYER_DISCONNECT_BEFORE_START:\"11\",\r\n  PLAYER_DISCONNECT_DURING_GAME:\"12\",\r\n  MOVE_TILE:\"13\",\r\n  TILE_INPUT_ERROR:\"14\",\r\n  SUBMIT_TILE:\"15\",\r\n  PASS:\"16\",\r\n  BOARD_CELL_OCCUPIED:\"17\",\r\n  PAUSE_GAME:\"18\",\r\n  RESUME_GAME:\"19\",\r\n  SEARCH_DICT:\"20\",\r\n  GAME_OVER:\"21\",\r\n  REMOVE_TILE_FROM_BOARD:\"22\",\r\n  JOIN_GAME_AFTER_DISCONNECT:\"23\",\r\n  I_JOIN_GAME_AFTER_DISCONNECT:\"24\",\r\n} \r\n\r\nexport const ROUTES :{\r\n  readonly HOME:string, \r\n  readonly GAME : string,\r\n  readonly START_NEW_GAME:string, \r\n  readonly JOIN_GAME:string,\r\n  readonly ACCEPT_OFFER_TO_PLAY:string,\r\n  readonly WAITING_FOR_ACCEPTANCE_OFFER:string\r\n} = {\r\n  HOME : \"/\",\r\n  GAME : \"/game\",\r\n  START_NEW_GAME:\"/start_new_game\",\r\n  JOIN_GAME:\"/join-game\",\r\n  ACCEPT_OFFER_TO_PLAY:\"/accept_offer_to_play\",\r\n  WAITING_FOR_ACCEPTANCE_OFFER:\"/waiting_for_acceptance_offer\",\r\n}\r\n\r\nexport const URL:{\r\n  readonly viewer:string, \r\n  readonly login:string, \r\n  readonly logOut:string\r\n} = {\r\n  viewer:\"/viewer\",\r\n  login:\"/login\",\r\n  logOut:\"/log-out\"\r\n};\r\n","import {getRequestOption} from \"../lib\";\r\n\r\nexport default {\r\n  viewer:getRequestOption(\"GET\"),\r\n  login:getRequestOption(\"POST\"),\r\n  logOut:getRequestOption(\"GET\"),\r\n}","import React, { useState } from 'react'\r\n\r\nimport { useMutation } from '../hooks';\r\n\r\nimport {indexUrl, MAX_USERNAME_LEN, MIN_USERNAME_LEN} from \"../lib\";\r\n\r\nimport {URL} from \"../lib/enum\";\r\n\r\nimport query from '../query';\r\n\r\nimport \"./index.css\";\r\n\r\ninterface Props {\r\n  updateUsername:(username:string)=>void\r\n}\r\n\r\nfunction validateUsername(username:string) :string{\r\n  let errorMsg = \"\";\r\n  if(username === \"\"){\r\n    errorMsg = \"Username is required\"\r\n  }\r\n  else if(username.length < MIN_USERNAME_LEN){\r\n    errorMsg = `Username should be atleast ${MIN_USERNAME_LEN} character long`;\r\n  }\r\n  else if(username.length > MAX_USERNAME_LEN){\r\n    errorMsg = `Username should not be more than ${MAX_USERNAME_LEN} character long`\r\n  }\r\n\r\n  else if(!(/[a-zA-Z\\d]/gi.test(username))){\r\n    errorMsg = \"Invalid username, Username can only contain alphabelt or number\";\r\n  }\r\n  return errorMsg;\r\n}\r\n\r\nexport const Login:React.FC<Props> = ({updateUsername}) => {\r\n  //controlled\r\n  const [username, setUsername] = useState(\"\");\r\n  //set error if any\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n  //use to mutate user request\r\n  const [response, mutate] = useMutation(indexUrl + URL.login)\r\n  //event handler for onChange event\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>)=>{\r\n    //clear error message when client attempt to enter a new username\r\n    if(errorMsg.length > 0){\r\n      //set error \r\n      setErrorMsg(\"\");\r\n    }\r\n    //set username on change\r\n    setUsername(event.target.value.trim().slice(0, MAX_USERNAME_LEN));\r\n  };\r\n\r\n  //log user in\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>)=>{\r\n    event.preventDefault();\r\n    //validate user input\r\n    const msg = validateUsername(username);\r\n    //if there is error display it\r\n    if(msg){\r\n      setErrorMsg(msg);\r\n    }else{\r\n      //get request option\r\n      const requestOpt = query.login;\r\n      //add header as json\r\n      requestOpt.headers = {\"Content-type\":\"application/json\"}\r\n      //add the post body\r\n      requestOpt.body = JSON.stringify({username});\r\n      //carry out request\r\n      mutate(requestOpt)\r\n      .then(({data})=>{\r\n        if(data.success){\r\n          updateUsername(data.username);\r\n        }\r\n        else{\r\n          setErrorMsg(data.msg);\r\n        }\r\n      });    \r\n    }//end else\r\n  };//end on submit handler\r\n\r\n  if(response.error){\r\n    setErrorMsg(response.error.message);\r\n  }\r\n\r\n  return (\r\n    <form action=\"\" onSubmit = {handleSubmit} className=\"login-form\">\r\n      <label htmlFor=\"username\">Select Username </label>\r\n      <input type=\"text\" name=\"username\" onChange={handleChange} value={username}/>\r\n      <span \r\n        style={{\r\n          marginLeft: 10,\r\n          color: \"#64edcb\",\r\n          backgroundColor: \"#2c23b3\",\r\n          padding: 5,\r\n          borderRadius: 4,\r\n        }}\r\n      >{MAX_USERNAME_LEN - username.length}</span>\r\n      <input type=\"submit\" value=\"Log In\" style={{marginLeft:10}}/>\r\n      \r\n      <div className=\"form-error\">{errorMsg}</div>\r\n    </form>\r\n  );\r\n}","import React from \"react\";\r\n\r\ninterface Props{\r\n  username:string,\r\n  score:number\r\n  isCurrentPlayer:boolean\r\n  tick:number\r\n};\r\n\r\nconst  Player :React.FC<Props> = ({username, score, isCurrentPlayer, tick})=>{\r\n  return (\r\n    <div \r\n      style={{\r\n        display:\"flex\",\r\n        backgroundColor: \"#6ba2b7\",\r\n        width:250,\r\n        borderRadius:5,\r\n        padding:5,\r\n        color:\"#fff\",\r\n        marginBottom:\"20px\",\r\n        border:(isCurrentPlayer ? \"solid 2px green\" : \"none\")\r\n      }}\r\n    >\r\n      <img \r\n        style={{width:50,flexBasis:50,  borderRadius:\"50%\"}} \r\n        src=\"./img/avatar/default-avatar.jpg\"\r\n        alt=\"\"\r\n      />\r\n      <div style={{\r\n        flexBasis:100,\r\n        marginLeft: 10,\r\n        }} className=\"word-wrap-up\">\r\n        <span\r\n          style={{\r\n            width: 10,\r\n            backgroundColor: \"green\",\r\n            display: \"inline-block\",\r\n            borderRadius: \"50%\",\r\n            height: 10,\r\n            position:\"relative\",\r\n            top:4,\r\n          }}\r\n        >&nbsp;</span> {username}\r\n      </div>\r\n      <div style={{flex:1}}>\r\n        <div>\r\n          &#128337; {isCurrentPlayer ? tick : \"\"}\r\n        </div>\r\n        <div>\r\n          &#x1F4BB; {score}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player\r\n\r\n//&#128337;","import React, { CSSProperties } from \"react\";\r\nimport { LastWord } from \"../../../declaration\";\r\n\r\ninterface Props{\r\n  playerInputTracker:LastWord[]\r\n};\r\n\r\nconst st:CSSProperties = {\r\n  textAlign:\"center\",\r\n  flex:1\r\n};\r\n\r\nconst ScoreBoard :React.FC<Props>= ({playerInputTracker})=>{\r\n  return (\r\n    <div\r\n        style={{\r\n          borderRadius:5, \r\n          backgroundColor: \"#6ba2b7\", \r\n          width:250, \r\n          color:\"#fff\",\r\n          height:200\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            boxShadow:\"0px 2px 1px 0px rgba(0, 0, 0, 0.5)\",\r\n            display:\"flex\", padding:5\r\n          }}\r\n        >\r\n          <div style={st}>Player</div>\r\n          <div style={st}>Word</div>\r\n          <div style={st}>Points</div>\r\n          <div style={st}>Total</div>\r\n        </div>\r\n        {\r\n          playerInputTracker.map(({player, point, word, score}, index)=>(\r\n            <div \r\n              style={{display:\"flex\", marginTop:5}}\r\n              key={`${word}${index}`}\r\n            >\r\n              <div className=\"word-wrap-up\" style={st}>{player}</div>\r\n              <div style={st}>{word}</div>\r\n              <div style={st}>{point}</div>\r\n              <div style={st}>{score}</div>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ScoreBoard;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport {SIZE, getElementPosition} from \"../../../../lib\";\r\n\r\ninterface Props{\r\n  text:string, \r\n  color:string,\r\n  rowIndex:number, \r\n  columnIndex:number,\r\n  backgroundColor:string, \r\n  hovering:boolean,\r\n  resetTilePosOnBoard:(boardCellPos:{x:number, y:number}, _scrollTop:number, tileID:string)=>void,\r\n  tileID?:string\r\n  children:React.ReactNode\r\n  _scrollTop:number\r\n  // x:number,\r\n  // y:number\r\n}\r\n\r\nexport const BoardSlot : React.FC<Props> = ({\r\n  text, rowIndex, columnIndex, backgroundColor, color, \r\n  hovering, resetTilePosOnBoard, tileID, children, _scrollTop\r\n})=>{\r\n\r\n  const addShadow = hovering ? {boxShadow:\"0px 0px 4px 4px rgba(0, 0, 0,1)\"} : {};\r\n\r\n  const boardCellRef = useRef<HTMLDivElement>(null);\r\n  \r\n  useEffect(()=>{\r\n    if(tileID && boardCellRef.current){\r\n      resetTilePosOnBoard(getElementPosition(boardCellRef.current), _scrollTop, tileID);\r\n    }\r\n  });\r\n\r\n  return text === \"\" ? (\r\n    <div \r\n      style={{userSelect: \"none\", ...addShadow}} \r\n      className=\"empty-slot\"\r\n      ref={tileID ? boardCellRef : null}\r\n    >\r\n      {\r\n        children\r\n      }\r\n    </div>\r\n  ) : (\r\n    <div \r\n      style={{\r\n        backgroundColor,\r\n        userSelect: \"none\",\r\n        color,\r\n        lineHeight:\"2.3\",\r\n        textAlign:\"center\",\r\n        position:\"relative\",\r\n        ...addShadow\r\n      }}\r\n      ref={tileID ? boardCellRef : null}\r\n    >\r\n      {\r\n        children ? children : text\r\n      }\r\n      {\r\n        rowIndex === 0 ? (\r\n          null\r\n        ) : (\r\n          <span \r\n            className=\"arrow-up\" \r\n            style={{borderBottom: `5px solid ${backgroundColor}`}}\r\n          ></span>\r\n        )\r\n      }\r\n      {\r\n        rowIndex === (SIZE - 1) ? (\r\n          null\r\n        ) : (\r\n          <span \r\n            className=\"arrow-down\" \r\n            style={{borderTop: `5px solid ${backgroundColor}`}}\r\n          ></span>\r\n        )\r\n      }\r\n      {\r\n        columnIndex === 0 ? (\r\n          null\r\n        ) : (\r\n          <span \r\n            className=\"arrow-left\" \r\n            style={{borderRight: `5px solid ${backgroundColor}`}}\r\n          ></span>\r\n        )\r\n      }\r\n      {\r\n        columnIndex === (SIZE - 1) ? (\r\n          null\r\n        ) : (\r\n          <span \r\n            className=\"arrow-right\" \r\n            style={{borderLeft: `5px solid ${backgroundColor}`}}\r\n          ></span>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n};\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n  maxWidth:number,\r\n  children:React.ReactChild[] | React.ReactChild,\r\n  handleSubmitTile:()=>void,\r\n  handlePass:()=>void,\r\n  disableBtn:boolean,\r\n}\r\n\r\nconst ScrabbleActionButton : React.FC<Props> = ({maxWidth, children, handleSubmitTile, handlePass, disableBtn})=>{\r\n  const submitTileRef = useRef<HTMLButtonElement>(null);\r\n  const passRef = useRef<HTMLButtonElement>(null);\r\n\r\n  useEffect(()=>{\r\n    const id = setTimeout(()=>{\r\n      if(submitTileRef.current) submitTileRef.current.blur();\r\n      if(passRef.current) passRef.current.blur();\r\n    }, 600);\r\n\r\n    return ()=>{\r\n      clearTimeout(id);\r\n    }\r\n  })\r\n  return (\r\n    <div className=\"action-btn-cont\" style={{maxWidth, marginBottom:10}}>\r\n      <button \r\n        ref={passRef}\r\n        className=\"action-btn\" \r\n        style={{backgroundColor:disableBtn ? \"grey\" : \"red\"}}\r\n        onClick={handlePass}\r\n        disabled={disableBtn}\r\n      >\r\n      </button>\r\n      <button \r\n        className=\"action-btn\" \r\n        style={{backgroundColor:disableBtn ? \"grey\" : \"#35bd35\", float:\"right\"}}\r\n        onClick={handleSubmitTile}\r\n        ref={submitTileRef}\r\n        disabled={disableBtn}\r\n      >\r\n      </button>\r\n      {\r\n        children\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScrabbleActionButton;","import React from \"react\";\r\nimport { TileType, SelectedTileType, Coordinate } from \"../../../../declaration\";\r\n\r\ninterface Props{\r\n  tile:TileType, \r\n  pos:Coordinate,\r\n  zIndex:number,\r\n  //boundary:{x1:number, x2:number, y1:number, y2:number}\r\n  handleSetSelectedTile:(selectedTile:SelectedTileType, boardCellPos:Coordinate, prevPos:Coordinate)=>void,\r\n  boardCellPos:Coordinate,\r\n  justPlayedTile:boolean,\r\n}\r\n\r\nexport const MovableLetterTile:React.FC<Props> = (\r\n  {tile, pos:{x, y}, handleSetSelectedTile, zIndex, boardCellPos, justPlayedTile})=>{\r\n    \r\n  const onMouseDown = (event: React.MouseEvent<HTMLDivElement, MouseEvent>)=>{\r\n    handleSetSelectedTile(\r\n      {id:tile.id, diff:{x:(event.clientX - x), y:(event.clientY - y)}},\r\n      boardCellPos,\r\n      {x, y}\r\n    );\r\n  };\r\n\r\n  const boxShadow = justPlayedTile ? {boxShadow:\"1px 1px 0px 1px rgba(0, 0, 0, 0.9), -1px -1px 0px 1px rgba(0, 0, 0, 0.9)\"} : {};\r\n  \r\n  return (\r\n    <div \r\n      className=\"ScrabbleBlock\" \r\n      style={{left:x, top:y, zIndex, ...boxShadow}} \r\n      onMouseDown={onMouseDown} \r\n    >\r\n      <span className=\"ScrabbleLetter\" style={{marginRight:1}}>{tile.letter}</span>\r\n      {\r\n        tile.point === 0 \r\n        ? null \r\n        : <span className=\"ScrabbleNumber\">{tile.point}</span>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport const UnMovableLetterTile:React.FC<{tile:TileType}> = ({tile})=>{\r\n  return (\r\n    <div \r\n      className=\"ScrabbleBlock\" \r\n      style={{position:\"relative\", zIndex:1000, top:-1}}  \r\n    >\r\n      <span className=\"ScrabbleLetter\" style={{marginRight:1}}>{tile.letter}</span>\r\n      {\r\n        tile.point === 0 \r\n        ? null \r\n        : <span className=\"ScrabbleNumber\">{tile.point}</span>\r\n      }\r\n    </div>\r\n  )\r\n}","import React, {useEffect} from 'react'\r\nimport { MsgType } from '../../../../declaration';\r\n\r\ninterface Props {\r\n  msg:string,\r\n  type:MsgType,\r\n  handleHideDialog:(id:string)=>void,\r\n  top:number,\r\n  id:string,\r\n  hide:boolean\r\n};\r\n//30 secs\r\nconst DIALOG_TIMEOUT = 1000 * 2;\r\n\r\nexport const MessageDialog:React.FC<Props> = ({type, msg, handleHideDialog, top, id, hide}) => {\r\n\r\n  useEffect(()=>{\r\n    if(hide){\r\n      const timeoutID = setTimeout(()=>{\r\n        handleHideDialog(id);\r\n      }, DIALOG_TIMEOUT);\r\n  \r\n      return ()=>{\r\n        clearTimeout(timeoutID);\r\n      }\r\n    }\r\n    /*eslint-disable react-hooks/exhaustive-deps*/\r\n  }, [hide]);\r\n\r\n  let color = \"#f44949\";\r\n\r\n  if(type === \"INFO\"){\r\n    color = \"#b8f7ee\"\r\n  }\r\n\r\n  else if(type === \"WARNING\"){\r\n    color = \"#ff9900\";\r\n  }\r\n\r\n  return (\r\n    <div \r\n      style={{\r\n        position:\"absolute\", \r\n        textAlign:\"center\",\r\n        width: \"100%\",\r\n        zIndex:1002,\r\n        backgroundColor:color,\r\n        boxShadow:\"1px 1px 2px 1px rgba(0, 0, 0, 0.6), -1px -1px 2px 1px rgba(0, 0, 0, 0.6)\",\r\n        fontFamily:\"cursive\",\r\n        height:25,\r\n        paddingTop:4,\r\n        boxSizing: \"border-box\",\r\n        top\r\n      }}\r\n    >\r\n      {msg}\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport {BoardSlot} from \"./BlockSlot\";\r\nimport ScrabbleActionButton from \"./ScrabbleActionBtn\";\r\n\r\nimport {MovableLetterTile, UnMovableLetterTile} from \"./LetterTile\";\r\n\r\n//import WebSocketWrapper from \"../../../lib/client-websocket-wrapper\";\r\n\r\nimport { getViewport, getElementPosition, generateUniqueID, getPlayerOfflineMsg } from \"../../../lib\";\r\nimport { SelectedTileType, TileType, TileBoardCellPos, PlayedTileBoardCellPos, MsgType, Coordinate } from \"../../../declaration\";\r\nimport WebSocketWrapper from \"../../../lib/client-websocket-wrapper\";\r\nimport { EVENT_TYPE } from \"../../../lib/enum\";\r\nimport { MessageDialog } from \"./MessageDialog\";\r\n\r\ninterface BoardPosition{x:number, y:number}\r\n\r\ninterface ThisRef{\r\n  //store total board size\r\n  boardSize:number, \r\n  boundaryX:number,\r\n  boundaryY:number,\r\n  //store the starting position to start putting tiles\r\n  startLeftPos:number,\r\n  startTopPos:number,\r\n  //lemme know that a tile was moved so as perform action when the tile is place at a particular point\r\n  //on mouse up\r\n  moveTiles:number,\r\n  //store the location of the board on the page\r\n  boardPos:BoardPosition,\r\n  //store the width and height of each cell or slot on the scrabble board\r\n  cellSize:number,\r\n  //store the id of the moved tile from rack to the scrabble board\r\n  //I have to store it cos, once the mouse is up, I reset the selected\r\n  //tile id in state to -1 before rendering\r\n  tileToPutOnBoardCell:string,\r\n  //Store the id of the tiles which are already in position\r\n  //this ensure that I do not set position again on every tile drop on the scrabblle board\r\n  //this is only cleared when there is a resize of the page so as to reposition all tileson window resize\r\n  alreadyInPositionTiles:{[key:string]:boolean},\r\n  //I need to store the previous tile position. This ensure if the tile is place at previous position\r\n  //nothing is transmitted to the server as well as to change the position if it changes\r\n  prevSelectedTileBoardCellPos:BoardPosition,\r\n  //store all tiles being played by a player at a particular time\r\n  //cos player can only play vertically or horizontally from left to right\r\n  playedTilesBoardCellPos:PlayedTileBoardCellPos,\r\n  //I need to add this cos, the is current player is set once when component mount\r\n  //so i need to set it use effect and when the values changes\r\n  isCurrentPlayer:boolean,\r\n  //I have to wait for server to process user inputand prevent current user from placing tile\r\n  //on the board.\r\n  waitForServer:boolean,\r\n  prevPos:Coordinate,\r\n  //I need to store the dialog message Idto be shown to user\r\n  //when the game is paused when one or more player disconnect\r\n  dialogMsgID:string,\r\n}\r\n\r\ninterface TileTypeAndPosition{\r\n  tile:{letter:string,  point:number, id:string, boardCellPos:{x:number, y:number}}, \r\n  pos:BoardPosition,\r\n};\r\n\r\ntype  DialogMessageType = {msg:string, type:MsgType, id:string, pauseDialogMsg:boolean};\r\n\r\ninterface Props{\r\n  tiles:TileType[],\r\n  ws:WebSocketWrapper,\r\n  isCurrentPlayer:boolean,\r\n  passed:boolean,\r\n  defTileBoardCellPos:TileBoardCellPos,\r\n  arePlayerOffline:boolean,\r\n  msg:string,\r\n  //showMsg:boolean,\r\n  currentPlayerID:string,\r\n  //updateShowMsgRef:()=>void\r\n};\r\n\r\n//board representation\r\nconst boardArray: string[][] = [\r\n  [\"TW\", \"\", \"\", \"DL\", \"\", \"\", \"\", \"TW\", \"\", \"\", \"\", \"DL\", \"\", \"\", \"TW\"],\r\n  [\"\", \"DW\", \"\", \"\", \"\", \"TL\", \"\", \"\", \"\", \"TL\", \"\", \"\", \"\", \"DW\", \"\"],\r\n  [\"\", \"\", \"DW\", \"\", \"\", \"\", \"DL\", \"\", \"DL\", \"\", \"\", \"\", \"DW\", \"\", \"\"],\r\n  [\"DL\", \"\", \"\", \"DW\", \"\", \"\", \"\", \"DL\", \"\", \"\", \"\", \"DW\", \"\", \"\", \"DL\"],\r\n  [\"\", \"\", \"\", \"\", \"DW\", \"\", \"\", \"\", \"\", \"\", \"DW\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"TL\", \"\", \"\", \"\", \"TL\", \"\", \"\", \"\", \"TL\", \"\", \"\", \"\", \"TL\", \"\"],\r\n  [\"\", \"\", \"DL\", \"\", \"\", \"\", \"DL\", \"\", \"DL\", \"\", \"\", \"\", \"DL\", \"\", \"\"],\r\n  [\"TW\", \"\", \"\", \"DL\", \"\", \"\", \"\", \"CE\", \"\", \"\", \"\", \"DL\", \"\", \"\", \"TW\"],\r\n  [\"\", \"\", \"DL\", \"\", \"\", \"\", \"DL\", \"\", \"DL\", \"\", \"\", \"\", \"DL\", \"\", \"\"],\r\n  [\"\", \"TL\", \"\", \"\", \"\", \"TL\", \"\", \"\", \"\", \"TL\", \"\", \"\", \"\", \"TL\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"DW\", \"\", \"\", \"\", \"\", \"\", \"DW\", \"\", \"\", \"\", \"\"],\r\n  [\"DL\", \"\", \"\", \"DW\", \"\", \"\", \"\", \"DL\", \"\", \"\", \"\", \"DW\", \"\", \"\", \"DL\"],\r\n  [\"\", \"\", \"DW\", \"\", \"\", \"\", \"DL\", \"\", \"DL\", \"\", \"\", \"\", \"DW\", \"\", \"\"],\r\n  [\"\", \"DW\", \"\", \"\", \"\", \"TL\", \"\", \"\", \"\", \"TL\", \"\", \"\", \"\", \"DW\", \"\"],\r\n  [\"TW\", \"\", \"\", \"DL\", \"\", \"\", \"\", \"TW\", \"\", \"\", \"\", \"DL\", \"\", \"\", \"TW\"],\r\n];\r\n\r\n//\r\nconst boardBlockColour :{[key:string]:{backgroundColor:string, color:string}} = {\r\n  TW:{backgroundColor:\"#d72421\", color:\"#f8bdb4\"},\r\n  TL:{backgroundColor:\"#4695ca\", color:\"#c3f5f7\"},\r\n  DW:{backgroundColor:\"#ffbead\", color:\"#b86e74\"},\r\n  DL:{backgroundColor:\"#6fe6f6\", color:\"#5d94c5\"},\r\n  CE:{backgroundColor:\"#d72421\", color:\"\"},\r\n  \"\":{backgroundColor:\"\", color:\"\"}\r\n}\r\n\r\nfunction resetTilesPosOnRack(\r\n  prevTilesWithPos: TileTypeAndPosition[], \r\n  startLeftPos:number, \r\n  startTopPos:number, \r\n  sort:boolean\r\n) :TileTypeAndPosition[]{\r\n  \r\n  if(sort){\r\n    prevTilesWithPos = prevTilesWithPos.sort((a:TileTypeAndPosition, b:TileTypeAndPosition)=>{\r\n      //if(!a.onRack || !b.onRack) return 0;\r\n      const a1 = a.pos.x;\r\n      const b1 = b.pos.x;\r\n      return a1 < b1 ? -1 : a1 > b1 ? 1 : 0; \r\n    });\r\n  }\r\n\r\n  let counter = 0;\r\n\r\n  return prevTilesWithPos.map((tp:TileTypeAndPosition)=>{\r\n    //only try to rearrange till if tile is on rack and not on board\r\n    //y >= (thisRef.current.startTopPos - 40)\r\n    if(tp.tile.boardCellPos.x === -1 || tp.tile.boardCellPos.y === -1){\r\n      tp.pos = {\r\n        x:startLeftPos + (counter * 40),\r\n        y:startTopPos\r\n      };\r\n      counter++;\r\n    }\r\n    return tp;\r\n  });\r\n}\r\n\r\nfunction setDialogHelper(dialog:DialogMessageType[], type:MsgType, msg:string, pauseDialogMsg:boolean=false) :DialogMessageType[]{\r\n  return [{type, msg, id:generateUniqueID(), pauseDialogMsg}, ...dialog];\r\n}\r\n\r\nfunction getScrollTop() :number{\r\n  return document.body.parentElement ? Math.floor(document.body.parentElement.scrollTop) : 0;\r\n}\r\n\r\nconst ScrabbleBoard: React.FC<Props> = ({tiles, msg, arePlayerOffline, isCurrentPlayer, currentPlayerID, ws, passed, defTileBoardCellPos})=>{\r\n  //console.log()\r\n  //console.log(tiles);\r\n  \r\n  //set msg dialog\r\n  const [dialogs, setDialogs] = useState<DialogMessageType[]>([]);\r\n\r\n  const [gamePaused, pauseOrResumeGame] = useState(false);\r\n  //store the location of each tiles on the board in this form `[${y}|${x}] = tile.id`\r\n  //it'll be use to permanently add the tile to the board when client finaly enter word input\r\n  //tileBoardCellPos:TileBoardCellPos,\r\n  const [tileBoardCellPos, setTileBoardCellPos] = useState<TileBoardCellPos>(defTileBoardCellPos);\r\n  //use to set and update app on window resize\r\n  const [size, setSize] = useState({width:0, height:0});\r\n  //use to set and update selected tile id\r\n  const [selectedTile, setSelectedTile] = useState<SelectedTileType>({id:\"-1\", diff:{x:0, y:0}});\r\n  \r\n  const [tilesWithPos, setTilesWithPos] = useState<TileTypeAndPosition[]>(\r\n    ()=>{\r\n      return tiles.map(tile=>{\r\n        //console.log(\"I was called\");\r\n        return ({tile:{...tile, boardCellPos:{x:-1, y:-1}}, pos:{x:0, y:0}});\r\n      })\r\n    }\r\n  );\r\n\r\n  const [scrollTop, setScrollTop] = useState<number>(getScrollTop());\r\n\r\n  //use to get board position on window resize\r\n  const boardRef = useRef<HTMLDivElement>(null);\r\n  //contain all object that should have being stored in private property if the function is a class\r\n  const thisRef = useRef<ThisRef>({\r\n    //(((grid width * number) + (gridGap * 15)) - 2) i.e ((30 * 15 + 3 * 15) - 2)\r\n    boardSize:(((30 * 15) + (3 * 15)) - 2),\r\n    boundaryX:0,\r\n    boundaryY:0,\r\n    startLeftPos:0,\r\n    startTopPos:0,\r\n    moveTiles:0,\r\n    boardPos:{x:0,y:0},\r\n    cellSize:33,\r\n    tileToPutOnBoardCell:\"-1\",\r\n    alreadyInPositionTiles:{},\r\n    prevSelectedTileBoardCellPos:{x:-1,y:-1},\r\n    playedTilesBoardCellPos:{},\r\n    isCurrentPlayer:isCurrentPlayer,\r\n    //currently initialize to false\r\n    waitForServer:false,\r\n    prevPos:{x:0, y:0},\r\n    dialogMsgID:\"\", \r\n  });\r\n\r\n  //use to add handler to window resize\r\n  useEffect(()=>{\r\n    //window resize event handler\r\n    const onResize = ()=>{\r\n      //console.log(ev.target.scrollTop);\r\n      const {width, height} = getViewport();\r\n      \r\n      if(size.width !== width){\r\n        //console.log({width, height, size});\r\n        setSize({width, height});\r\n      }\r\n    }//end onResize\r\n\r\n    const handleOnScroll = ()=>{\r\n      setScrollTop(getScrollTop());\r\n    };\r\n    //add event handler to window resize\r\n    window.addEventListener(\"resize\", onResize)\r\n    window.addEventListener(\"scroll\", handleOnScroll);\r\n\r\n    const onMoveTile = (data:{\r\n      x:number,\r\n      y:number,\r\n      prevTileBoardPos:string,\r\n      tile:TileType,\r\n    })=>{\r\n      console.log(data);\r\n      //add new position to place tile after fdeleting previous location\r\n      setTileBoardCellPos(prev=>{\r\n        delete prev[data.prevTileBoardPos];\r\n        return (\r\n          Number.isInteger(data.y) && Number.isInteger(data.x) && data.tile ? ({\r\n              ...prev,\r\n              [`${data.y}|${data.x}`]:data.tile\r\n          }) : ({\r\n            ...prev\r\n          })\r\n        );\r\n      });\r\n    };//end function onMoveTile\r\n\r\n    //add event handler when to move tile around board\r\n    ws.addEventListener(EVENT_TYPE.MOVE_TILE, onMoveTile);\r\n\r\n    const onTileInputError :()=>void = ()=>{\r\n      //stop waiting for server, since server as responded to user tile input \r\n      thisRef.current.waitForServer = false;\r\n      //set to default\r\n      thisRef.current.playedTilesBoardCellPos = {};\r\n      //console.log(\"input tile error\");\r\n      setDialogs(PrevDialogs=>setDialogHelper(PrevDialogs, \"ERROR\", \"Tile input is not correct\"));\r\n      \r\n      //remove tile from board and place them back to tile\r\n      //when user tile input is wrong\r\n      setTilesWithPos(\r\n        prevTilesWithPos=>\r\n        //call method to place tile back on rack\r\n        resetTilesPosOnRack(\r\n          prevTilesWithPos.map(t=>{\r\n            //put tile back to tile\r\n            t.tile.boardCellPos = {x:-1, y:-1};\r\n            return t;\r\n          }),\r\n          thisRef.current.startLeftPos,\r\n          thisRef.current.startTopPos,\r\n          false\r\n        )\r\n      );\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.TILE_INPUT_ERROR, onTileInputError);\r\n\r\n    const onBoardCellOcuppied :()=>void = ()=>{\r\n      setDialogs(PrevDialogs=>setDialogHelper(PrevDialogs, \"ERROR\", \"Board cell is already occupied\"))\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.BOARD_CELL_OCCUPIED, onBoardCellOcuppied);\r\n\r\n    const onPass :(data:{msg:string, b:string[]})=>void = (data)=>{\r\n      const isCurrentPlayer = thisRef.current.isCurrentPlayer;\r\n      //if its the current \r\n      if(isCurrentPlayer){\r\n        //console.log(\"I executed isCurrentPlayer\");\r\n        //remove tile from board and place them back to tile\r\n        setTilesWithPos(\r\n          prevTilesWithPos=>\r\n          //call method to place tile back on rack\r\n          resetTilesPosOnRack(\r\n            prevTilesWithPos.map(t=>{\r\n              //put tile back to tile\r\n              t.tile.boardCellPos = {x:-1, y:-1};\r\n              return t;\r\n            }),\r\n            thisRef.current.startLeftPos,\r\n            thisRef.current.startTopPos,\r\n            false\r\n          )\r\n        );\r\n        //initialize to empty object\r\n        thisRef.current.playedTilesBoardCellPos = {};\r\n      }//end if(isCurrentPlayer)\r\n      else{\r\n        //don't show message to the user who just passed\r\n        setDialogs(PrevDialogs=>setDialogHelper(PrevDialogs, \"INFO\", data.msg));\r\n        //if a player pass, I need to delete the tile the player place on the board\r\n        if(data.b.length > 0){\r\n          setTileBoardCellPos(prev=>{\r\n            data.b.forEach(boardCellPos=>{\r\n              delete prev[boardCellPos];\r\n            });\r\n            return {...prev};\r\n          });\r\n        }\r\n      }//end else\r\n      //initialize played tiles to empty object\r\n      //thisRef.current.playedTilesBoardCellPos = {};\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.PASS, onPass);\r\n\r\n    const onPauseGame :()=>void = ()=>{\r\n      pauseOrResumeGame(true);\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.PAUSE_GAME, onPauseGame);\r\n\r\n    const onResumeGame :()=>void = ()=>{\r\n      const {dialogMsgID} = thisRef.current;\r\n      const msg = (\r\n        isCurrentPlayer \r\n        ? \"Game resumed!, its your turn to play.\" \r\n        :`Game resumed!, ${currentPlayerID} is on turn to play.`\r\n      );\r\n      /**\r\n       * When game resume I need to remove the pause dialog message\r\n       * initialize it to object with id property of empty string and offline player empty array \r\n       */\r\n      if(dialogMsgID){\r\n        //hide the message\r\n        setDialogs(prevDialog=>prevDialog.map(\r\n          d=>d.id === dialogMsgID ? {...d, pauseDialogMsg:false, msg, type:\"INFO\"} : d\r\n        ));\r\n        //remove info from store\r\n        thisRef.current.dialogMsgID = \"\";\r\n      }else{\r\n        setDialogs(prevDialog=>[\r\n          {type:\"INFO\", id:generateUniqueID(), pauseDialogMsg:false, msg}, ...prevDialog\r\n        ]);\r\n      }\r\n      pauseOrResumeGame(false);\r\n      //setDialogs(prevDialog=>prevDialog.map())\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.RESUME_GAME, onResumeGame);\r\n\r\n    const onRemoveTileFromBoardDueToPlayerError :(boardCellPos :string[])=>void = (boardCellPos)=>{\r\n      setTileBoardCellPos(prevTileBoardCellPos=>{\r\n        boardCellPos.forEach(boardCoord=>{\r\n          delete prevTileBoardCellPos[boardCoord];\r\n        });\r\n        console.log(\"I was called\");\r\n        return {\r\n          ...prevTileBoardCellPos\r\n        };\r\n      });\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.REMOVE_TILE_FROM_BOARD, onRemoveTileFromBoardDueToPlayerError);\r\n\r\n    const onPlayerDisconnectDuringGame :(newOfflinePlayer:string[]) => void = (newOfflinePlayer)=>{\r\n      //get the id of the pause message that is show to user\r\n      const {dialogMsgID} = thisRef.current;\r\n      //if message is already displayed\r\n      if(dialogMsgID){\r\n        //get dialog message\r\n        setDialogs(prevDialog=>prevDialog.map(d=>{\r\n          return (\r\n            //if message find, spread and generate new message\r\n            d.id === dialogMsgID \r\n            ? {...d, msg:getPlayerOfflineMsg(newOfflinePlayer)}\r\n            //else return dialog message\r\n            : d\r\n          );\r\n        }));\r\n      }\r\n      else{\r\n        const dialogMsgID = generateUniqueID();\r\n        thisRef.current.dialogMsgID = dialogMsgID\r\n        //generate dialog msg\r\n        const dialogMsg:DialogMessageType = {\r\n          pauseDialogMsg:true,\r\n          msg:getPlayerOfflineMsg(newOfflinePlayer),\r\n          id:dialogMsgID,\r\n          type:\"WARNING\"\r\n        };\r\n        //update dialog message state\r\n        setDialogs(prevDialogs=>[dialogMsg, ...prevDialogs]);\r\n      }\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.PLAYER_DISCONNECT_DURING_GAME, onPlayerDisconnectDuringGame);\r\n\r\n\r\n    //\r\n    //const onSetT\r\n    //component will unmount to ensure\r\n    //no memory leak when component unmount\r\n    return ()=>{\r\n      //when component unmount remove event handler\r\n      window.removeEventListener(\"resize\", onResize);\r\n      window.removeEventListener(\"scroll\", handleOnScroll);\r\n      //remove when unmount\r\n      ws.removeEventListener(EVENT_TYPE.MOVE_TILE, onMoveTile);\r\n      ws.removeEventListener(EVENT_TYPE.TILE_INPUT_ERROR, onTileInputError);\r\n      ws.removeEventListener(EVENT_TYPE.BOARD_CELL_OCCUPIED, onBoardCellOcuppied);\r\n      ws.removeEventListener(EVENT_TYPE.PASS, onPass);\r\n      ws.removeEventListener(EVENT_TYPE.PAUSE_GAME, onPauseGame);\r\n      ws.removeEventListener(EVENT_TYPE.RESUME_GAME, onResumeGame);\r\n      ws.removeEventListener(EVENT_TYPE.REMOVE_TILE_FROM_BOARD, onRemoveTileFromBoardDueToPlayerError);\r\n      ws.removeEventListener(EVENT_TYPE.PLAYER_DISCONNECT_DURING_GAME, onPlayerDisconnectDuringGame);\r\n    };\r\n    /*eslint-disable react-hooks/exhaustive-deps*/\r\n  }, []);\r\n  \r\n  //use to \"recalibarate\" the app on window resize\r\n  useEffect(()=>{\r\n    if(boardRef.current){\r\n      //get board wrapper poistion on page\r\n      const boardPos = getElementPosition(boardRef.current);\r\n      //add hidding part of the page to the position from which the board is starting from\r\n      //the page need to re-render to fit page\r\n      boardPos.y += scrollTop;\r\n      //ensure user can only carry tile on board and re arrange tile only\r\n      //boardPos.x is the left position of the board\r\n      //boardSize is the width of the scrabble board\r\n      thisRef.current.boundaryX = boardPos.x + thisRef.current.boardSize;\r\n      //board size is the height of the board\r\n      //15px is the top margin between board and scrabble rack\r\n      //boardPos.y is the top position of the board\r\n      //32px is the height of the scrabble tile\r\n      \r\n      \r\n      console.log({scrollTop});\r\n\r\n      thisRef.current.boundaryY = thisRef.current.boardSize + 15 + boardPos.y + 32;\r\n      //70px is margin left from the left red button\r\n      thisRef.current.startLeftPos= boardPos.x + 70;\r\n      //board size is the height of the board\r\n      //the added 15 pixel is margin to push away the tiles from board\r\n      //y position of the board\r\n      thisRef.current.startTopPos = thisRef.current.boardSize + 15 + boardPos.y;\r\n      //store the new board position for later use\r\n      thisRef.current.boardPos = boardPos;\r\n      //reset already in position variable,this ensure all tile board position is recalculated\r\n      thisRef.current.alreadyInPositionTiles = {};\r\n      //reset tile position when resize take place\r\n      //also set tile on first load\r\n      setTilesWithPos(prevTilesWithPos=>(\r\n        resetTilesPosOnRack(\r\n          prevTilesWithPos, \r\n          thisRef.current.startLeftPos, \r\n          thisRef.current.startTopPos, \r\n          false\r\n        )\r\n      ));\r\n    }\r\n    //console.log({size});\r\n  }, [size, scrollTop]);\r\n\r\n  useEffect(()=>{\r\n    thisRef.current.tileToPutOnBoardCell = \"-1\";\r\n  }, [selectedTile, tilesWithPos]);\r\n\r\n  //when finish playing and new tiles are added to replace previous played tiles\r\n  useEffect(()=>{\r\n    //console.log(tiles);\r\n    //if there are tiles \r\n    const tileBoardCells = Object.keys(thisRef.current.playedTilesBoardCellPos);\r\n    //console.log(tileBoardCells);\r\n    if(tileBoardCells.length > 0){\r\n      //store the tile id of that the user just play, so as to put them permanently on the board\r\n      let tileID = \"\", \r\n          //store the cell on which the tile is placed\r\n          tileBoardCell = \"\",\r\n          tile = null;\r\n      //temporary map tile id to each tile\r\n      const tempTileObject :{[key:string]:TileType}= {};\r\n      //map the board cell position to tile object\r\n      const permanentTileBoardCellPos:TileBoardCellPos = {};\r\n      //loop thru all tile\r\n      for(let c = 0; c < tilesWithPos.length; c++){\r\n        tile =  tilesWithPos[c].tile;\r\n        //set tile as value and tile id as key\r\n        tempTileObject[tile.id] = tile;\r\n      }//end for loop\r\n      console.log({tempTileObject});\r\n      //loop throught the boarc cell position\r\n      for(let i = 0; i < tileBoardCells.length; i++){\r\n        //get the board cell position of a tile\r\n        tileBoardCell = tileBoardCells[i];\r\n        //get the tile id of that is placed on this tile board\r\n        tileID = thisRef.current.playedTilesBoardCellPos[tileBoardCell];\r\n        console.log({tileID})\r\n        //store the tile as value and the board cell as key\r\n        permanentTileBoardCellPos[tileBoardCell] = tempTileObject[tileID];\r\n      }//end for loop\r\n      console.log({permanentTileBoardCellPos});\r\n      //update all permanent tile on the board\r\n      setTileBoardCellPos(prevTileBoardCells=>({...prevTileBoardCells, ...permanentTileBoardCellPos}));\r\n      //initialize for next play\r\n      thisRef.current.playedTilesBoardCellPos ={};\r\n      //set tiles back to rack\r\n      //setTilesWithPos(tiles.map(tile=>({tile:{...tile, boardCellPos:{x:-1, y:-1}}, pos:{x:0, y:0}})));\r\n      setTilesWithPos(\r\n        resetTilesPosOnRack(\r\n          tiles.map(tile=>({tile:{...tile, boardCellPos:{x:-1, y:-1}}, pos:{x:0, y:0}})), \r\n          thisRef.current.startLeftPos, \r\n          thisRef.current.startTopPos, \r\n          false\r\n        )\r\n      );\r\n    }//end if\r\n  }, [tiles]);\r\n\r\n  useEffect(()=>{\r\n    //some time the message might be from parent component, so i don't want the \r\n    //message to be clashing with each other\r\n    //if(showMsg){\r\n      \r\n      const dialogMsgID = generateUniqueID();\r\n\r\n      setDialogs(prevDialog=>([{\r\n        msg, pauseDialogMsg:arePlayerOffline,\r\n        type:arePlayerOffline ? \"WARNING\" : \"INFO\",\r\n        id:dialogMsgID\r\n      }, ...prevDialog]));\r\n      /**\r\n       * I need to store this message ID cos, the message is \"sticky\", I need to store \r\n       * this id to delete it later\r\n       */\r\n      if(arePlayerOffline) thisRef.current.dialogMsgID = dialogMsgID;\r\n      /**\r\n       * I need to update show message ref from parent so, I don't show a \r\n       * particular message more than onces\r\n       */\r\n      //updateShowMsgRef();\r\n    //}\r\n  }, [msg]);\r\n\r\n  useEffect(()=>{\r\n    //let player be able to place tile on the board\r\n    //cos i find out while processing user input on the server\r\n    //player can place tile on the board and the tile are locked, thereby disrupting play\r\n    //thisRef.current.waitForServer = false;\r\n    //let player be able to place tile on the board\r\n    //cos i find out while processing user input on the server\r\n    //player can place tile on the board and the tile are locked, thereby disrupting play\r\n    thisRef.current.waitForServer = false;\r\n    //save weather player is the current player to play or not\r\n    thisRef.current.isCurrentPlayer = isCurrentPlayer;\r\n  }, [isCurrentPlayer]);\r\n\r\n  //event handler which respond to clicking of the tile prior to movement\r\n  const onSetSelectedTile :(selectedTile:SelectedTileType, boardCellPos:Coordinate, prevPos:Coordinate)=>void \r\n  = useCallback((selectedTile, boardCellPos, prevPos)=>{\r\n    //I mean need to set tile back at the previous position when player try to place tile on\r\n    //a slot that is already filled\r\n    //Its also needed to prevent multiple sending of position to other player\r\n    //when tile is moved around and drop back at the original position it was moved from\r\n    thisRef.current.prevSelectedTileBoardCellPos = boardCellPos;\r\n    //I needed this value to return tile back to rack if player try to place tile on a board slot that\r\n    //already contain tile\r\n    thisRef.current.prevPos = prevPos;\r\n    //trigger move\r\n    setSelectedTile(selectedTile);\r\n  }, [setSelectedTile]);\r\n\r\n  const resetTilePosOnBoard :(boardCellPos:Coordinate, _scrollTop:number, tileID:string)=>void \r\n  = useCallback(\r\n    (boardCellPos, _scrollTop, titleID)=>setTilesWithPos(prevTilesWithPos=>{\r\n      return prevTilesWithPos.map(tp=>{\r\n        if(tp.tile.id === titleID){\r\n          \r\n          tp.pos.x = boardCellPos.x - 1;\r\n          tp.pos.y = (boardCellPos.y + _scrollTop) - 1;\r\n          thisRef.current.alreadyInPositionTiles[titleID] = true;\r\n        }//end if\r\n        return tp;\r\n      });\r\n    }),\r\n    [setTilesWithPos]\r\n  );\r\n\r\n  const hideDialogMsg :(dialogID:string)=>void = useCallback((dialogID)=>{\r\n    setDialogs(PrevDialogs=>{\r\n      return PrevDialogs.filter(d=>d.id !== dialogID)\r\n    });\r\n  }, [setDialogs]);\r\n\r\n  const handleSubmitTile :()=>void = ()=>{\r\n    if(Object.keys(thisRef.current.playedTilesBoardCellPos).length > 0){\r\n      console.log(\"I was called\");\r\n      //wait for server to process user tile input\r\n      //during the wait time, this ensure user cannot put tile on the board\r\n      thisRef.current.waitForServer = true;\r\n      console.log(thisRef.current.waitForServer);\r\n      ws.send(EVENT_TYPE.SUBMIT_TILE, {}, []);\r\n    }\r\n  };\r\n\r\n  const onPass :()=>void = ()=>{\r\n    //ensure user cannot place new tile on the board while server is processing\r\n    thisRef.current.waitForServer = true;\r\n    ws.send(EVENT_TYPE.PASS, {}, []);\r\n  };\r\n\r\n  const onMouseMove = (event: React.MouseEvent<HTMLDivElement, MouseEvent>)=>{\r\n    //only move tile if a particular tile is selected by client\r\n    if(selectedTile.id !== \"-1\"){\r\n      //get mouse postion from page\r\n      const clientX = event.clientX > thisRef.current.boundaryX ? thisRef.current.boundaryX : event.clientX, \r\n            clientY = event.clientY > thisRef.current.boundaryY ? thisRef.current.boundaryY : event.clientY;\r\n\r\n      let x = (clientX - selectedTile.diff.x);\r\n      let y = (clientY - selectedTile.diff.y);\r\n      //tile is only being moved around rack\r\n      if(x >= thisRef.current.boardPos.x && y >= (thisRef.current.startTopPos - 40)){\r\n        //ensure re arranging of tiles does to go beyond tiles total tiles in rack\r\n        //if(x <= (thisRef.current.startLeftPos + (40 * tilesWithPos.length))){\r\n        //if(x <= (thisRef.current.boardPos.x + (thisRef.current.boardSize - 30))){\r\n          setTilesWithPos(prevTilesWithPos=>{\r\n            return prevTilesWithPos.map(tp=>{\r\n              if(tp.tile.id === selectedTile.id){\r\n                tp.tile.boardCellPos = {x:-1, y:-1};\r\n                //move tiles around\r\n                tp.pos = {x, y};\r\n              }\r\n              return tp;\r\n            });\r\n          });//end setTilesWithPos\r\n        //}//end if(x <= (thisRef.current.startLeftPos + (40 * tilesWithPos.length)))\r\n        //ensure that no matter where tiles is moved to, its be align back on rack\r\n        thisRef.current.moveTiles = 1;\r\n\r\n        return;\r\n      }//end inner if(x >= thisRef.current.startLeftPos && y >= thisRef.current.startTopPos)\r\n\r\n      //if its not player turn to play prevent player from placing tiles on board\r\n      //if game is paused\r\n      //if passed\r\n      //if game is waiting for server response \r\n      //prevent player from playcing tile on the board\r\n      if(!isCurrentPlayer || gamePaused || passed || thisRef.current.waitForServer) return\r\n      /**\r\n       * ensure tiles does not move out of the board\r\n       * y >= thisRef.current.boardPos.y ensure the tiles does not go out of the board toward the header section\r\n       * x >= thisRef.current.boardPos.x ensure the tiles does not go out of the board toward the player and score baord\r\n       * x <= (thisRef.current.boundaryX - 25) ensure the tiles does not go out of the board on the right hand side\r\n       */\r\n      y = y >= thisRef.current.boardPos.y ? y : thisRef.current.boardPos.y;\r\n      x = x >= thisRef.current.boardPos.x ? x : thisRef.current.boardPos.x;\r\n      x = x <= (thisRef.current.boundaryX - 25) ? x : (thisRef.current.boundaryX - 25);\r\n      //console.log(\"I executed\");\r\n      setTilesWithPos(prevTilesWithPos=>{\r\n        return prevTilesWithPos.map(tp=>{\r\n          //\r\n          if(tp.tile.id === selectedTile.id){\r\n            //get the cell location where tiles is currently hovering at\r\n            const yRow = Math.round((y - thisRef.current.boardPos.y) / thisRef.current.cellSize);\r\n            const xColumn = Math.round((x - thisRef.current.boardPos.x) / thisRef.current.cellSize);\r\n            thisRef.current.moveTiles = 2;\r\n            //set position for tile\r\n            tp.tile.boardCellPos = {y:yRow, x:xColumn};\r\n            /**\r\n             * tiles is on now on the scrabble board, we won't re-arrange this tiles \r\n             * i.e this tile will maintain position on the board and not place on rack again\r\n             * when the tiles are moved around on the rack\r\n             */\r\n            tp.pos = {x, y};\r\n            //ensure the position is not yet filled by another tile\r\n          }//end if(tp.tile.id === selectedTile.id)\r\n          return tp;\r\n        });\r\n      });//end setTilesWithPos\r\n        \r\n    }//end end function onMouseMOve\r\n  };//end on mouse move\r\n  //snap into position\r\n  \r\n  const onMouseUp = ()=>{\r\n    console.log({moveTiles:thisRef.current.moveTiles});\r\n\r\n    if(thisRef.current.moveTiles === 2){\r\n      thisRef.current.tileToPutOnBoardCell = selectedTile.id;\r\n    }\r\n    else if(thisRef.current.moveTiles === 1){\r\n      //needed to remove tile from board if user just move the tile from board \r\n      //back to the rack\r\n      const {x, y} = thisRef.current.prevSelectedTileBoardCellPos;\r\n      const index = `${y}|${x}`;\r\n      //if \r\n      if(thisRef.current.playedTilesBoardCellPos[index]){\r\n        //send request to server to remove tile from board\r\n        //delete position from board store\r\n        delete thisRef.current.playedTilesBoardCellPos[index];\r\n        ws.send(EVENT_TYPE.MOVE_TILE, {prevTileBoardPos:index}, [])\r\n      }//end if(thisRef.current.playedTileBoardCellPos[index])\r\n\r\n      //delete \r\n      setTilesWithPos(prevTilesWithPos=>(\r\n        resetTilesPosOnRack(\r\n          prevTilesWithPos, \r\n          thisRef.current.startLeftPos, \r\n          thisRef.current.startTopPos, \r\n          true\r\n        )\r\n      ));\r\n    }\r\n    setSelectedTile({id:\"-1\", diff:{y:0, x:0}});\r\n    thisRef.current.moveTiles = 0;\r\n  };\r\n\r\n  //I need to know the selected board cell to add hover to it so as to show user\r\n  //where the tile will be dropped\r\n  let selectedTileBoardPos = {x:-1, y:-1};\r\n  /**\r\n   * I want to prevent the repositioning of tile every time the tile is moved across the board\r\n   * I just want to reposition the tile if there is a window resize\r\n   */\r\n  const tileToReposition : {[key:string]:string} = {};\r\n  //get all id of played tiles\r\n  const playedTileIDs = Object.values(thisRef.current.playedTilesBoardCellPos);\r\n  \r\n  const tilesReactNode = (\r\n    tilesWithPos.map(tp=>{\r\n      let zIndex = 1000;\r\n      \r\n      //const {tile, pos} = tp;\r\n\r\n      const {x:prevCellPosX, y:prevCellPosY} = thisRef.current.prevSelectedTileBoardCellPos;\r\n\r\n      if(tp.tile.boardCellPos.x > -1 && tp.tile.boardCellPos.y > -1){\r\n        if(tp.tile.id === selectedTile.id){\r\n          selectedTileBoardPos = tp.tile.boardCellPos;\r\n          zIndex = 1001;\r\n        }\r\n\r\n        else if(thisRef.current.tileToPutOnBoardCell === tp.tile.id){\r\n          //ensure user place the tile vertically or horizontally and not scatter the\r\n          //tile across the board\r\n          //get tile drop position on the board\r\n          selectedTileBoardPos = tp.tile.boardCellPos;\r\n          /**\r\n           * I need to ensure tile slot is not occupied i.e empty before\r\n           * dropping a new tile on it.\r\n           */\r\n          //stringify position\r\n          const index = `${selectedTileBoardPos.y}|${selectedTileBoardPos.x}`;\r\n          //ensure board slot is empty i.e ensure no tile is on it\r\n          //if true, tile is on board slot new tile cannot be placed on old one\r\n          if(tileBoardCellPos[index] || thisRef.current.playedTilesBoardCellPos[index]){            \r\n            //return tile back to previous position\r\n            tp.tile.boardCellPos = thisRef.current.prevSelectedTileBoardCellPos;\r\n            selectedTileBoardPos = {x:-1,y:-1};\r\n            //if tile was picked from rack, send tile back to rack\r\n            if(tp.tile.boardCellPos.y <= -1 || tp.tile.boardCellPos.x <= -1){\r\n              tp.pos = thisRef.current.prevPos;\r\n            }\r\n            else{\r\n              tileToReposition[`${tp.tile.boardCellPos.y}|${tp.tile.boardCellPos.x}`] = tp.tile.id;\r\n            }\r\n          }//end if(!thisRef.current.playedTilesBoardCellPos[`${yRow}|${xColumn}`])\r\n\r\n          //if \r\n          else if(selectedTileBoardPos.x !== prevCellPosX || selectedTileBoardPos.y !== prevCellPosY){\r\n            //send prev cell location and new location to the server\r\n            const toBeSentTileBoardPos:{\r\n              x:number,\r\n              y:number,\r\n              prevTileBoardPos:string,\r\n              tID:string,\r\n            } = {\r\n              x:selectedTileBoardPos.x,\r\n              y:selectedTileBoardPos.y,\r\n              tID:tp.tile.id,\r\n              prevTileBoardPos:(prevCellPosY === -1 || prevCellPosX === -1) ? \"\" : `${prevCellPosY}|${prevCellPosX}`\r\n            };\r\n            //debug\r\n            //send tiles position to the server to be sent to all other player(s)\r\n            ws.send(EVENT_TYPE.MOVE_TILE, toBeSentTileBoardPos, []);\r\n            //payload to be sent to server\r\n            //delete previous location and save new location\r\n            delete thisRef.current.playedTilesBoardCellPos[`${prevCellPosY}|${prevCellPosX}`];\r\n            //save in new position\r\n            thisRef.current.playedTilesBoardCellPos[`${tp.tile.boardCellPos.y}|${tp.tile.boardCellPos.x}`] = tp.tile.id;\r\n            //console.log(thisRef.current.playedTilesBoardCellPos);\r\n          }//end if\r\n          //reset to -1;\r\n          thisRef.current.prevSelectedTileBoardCellPos = {x:-1, y:-1};\r\n          //debug\r\n          //console.log(thisRef.current.playedTilesBoardCellPos); \r\n        }//end else if(thisRef.current.tileToPutOnBoardCell === tile.id)\r\n        else if(!thisRef.current.alreadyInPositionTiles[tp.tile.id]){\r\n          tileToReposition[`${tp.tile.boardCellPos.y}|${tp.tile.boardCellPos.x}`] = tp.tile.id;\r\n        }\r\n      }\r\n      //The selected tile should be above every other tile when picked and drag around\r\n      else if(tp.tile.id === selectedTile.id){\r\n        zIndex = 1001;\r\n      }\r\n      //console.log(thisRef.current.tileToPutOnBoardCell)\r\n      return (\r\n        <MovableLetterTile \r\n          tile={tp.tile} \r\n          key={tp.tile.id} \r\n          pos={tp.pos}\r\n          handleSetSelectedTile = {onSetSelectedTile}\r\n          zIndex = {zIndex}\r\n          boardCellPos={tp.tile.boardCellPos}\r\n          justPlayedTile = {(playedTileIDs.indexOf(tp.tile.id) > -1)}\r\n        />\r\n      );\r\n    })\r\n  );\r\n\r\n  //console.log(tileToReposition);\r\n  //console.log(selectedTileBoardPos);\r\n\r\n  return(\r\n    <div \r\n      className = \"scrabble-board-wrapper\" \r\n      ref={boardRef} \r\n      onMouseMove={onMouseMove}\r\n      onMouseUp = {onMouseUp}\r\n    >\r\n      <div \r\n        style={{\r\n          display:\"grid\", \r\n          gridGap:3, \r\n          gridTemplateColumns:`repeat(15, 30px)`,\r\n          gridTemplateRows:`repeat(15, 30px)`,\r\n          //(((grid width * number) + (gridGap * 15)) - 2) i.e ((35 * 15 + 3 * 15) - 2)\r\n          maxWidth:thisRef.current.boardSize,\r\n          border:\"3px solid #fff\",\r\n          position:\"relative\"\r\n        }}\r\n        className=\"scrabble-board\"\r\n      >\r\n        {\r\n          dialogs.map((d, index)=>(\r\n            <MessageDialog \r\n              key={d.id} \r\n              top={index * 30} \r\n              type={d.type}\r\n              msg={d.msg}\r\n              id={d.id}\r\n              handleHideDialog={hideDialogMsg}\r\n              hide={!d.pauseDialogMsg}\r\n            />\r\n          ))\r\n        }\r\n        {\r\n          boardArray.map((boardRow:string[], rowIndex:number)=>(\r\n            boardRow.map((text:string, columnIndex)=>{\r\n\r\n              const hovering = (\r\n                rowIndex === selectedTileBoardPos.y \r\n                && columnIndex === selectedTileBoardPos.x\r\n              );\r\n\r\n              let tileID = undefined;\r\n              const index = `${rowIndex}|${columnIndex}`;\r\n\r\n              let children = text === \"\" ? (<>&nbsp;</>) : null;\r\n\r\n              if(tileBoardCellPos[index]){\r\n                children = (\r\n                  <UnMovableLetterTile tile={tileBoardCellPos[index]}/>\r\n                );\r\n              }\r\n              else if(hovering && thisRef.current.tileToPutOnBoardCell !== \"-1\"){\r\n                tileID = thisRef.current.tileToPutOnBoardCell;\r\n              }\r\n              else if(tileToReposition[index]){\r\n                tileID = tileToReposition[index];\r\n              }\r\n\r\n              //console.log({tileID});\r\n              return (\r\n                <BoardSlot\r\n                  key={index}\r\n                  rowIndex={rowIndex}\r\n                  columnIndex={columnIndex}\r\n                  {...boardBlockColour[text]}\r\n                  text={text}\r\n                  hovering = {hovering}\r\n                  resetTilePosOnBoard = {resetTilePosOnBoard}\r\n                  _scrollTop = {scrollTop}\r\n                  tileID={tileID}\r\n                >\r\n                  {children}\r\n                </BoardSlot>\r\n              );//end return\r\n            })//end inner map\r\n          ))//end outer map\r\n        }\r\n      </div>\r\n      <ScrabbleActionButton \r\n        maxWidth={thisRef.current.boardSize}\r\n        handleSubmitTile={handleSubmitTile}\r\n        handlePass={onPass}\r\n        disableBtn={!isCurrentPlayer || gamePaused}\r\n      >\r\n        {\r\n          tilesReactNode\r\n        }\r\n      </ScrabbleActionButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrabbleBoard;","export enum MEDAL_TYPE  {\r\n  GOLD,\r\n  SILVER,\r\n  BRONZE,\r\n};\r\n\r\nexport interface PlayerPosition{\r\n  name:string,\r\n  score:number,\r\n}\r\n\r\nexport type Coordinate = {x:number, y:number};\r\n\r\nexport type MsgType = \"ERROR\" | \"INFO\" | \"WARNING\";\r\n\r\nexport type ClientPlayer = {username:string, score:number};\r\n\r\nexport type LastWord = {word:string, point:number, score:number, player:string}\r\n\r\nexport type GeneralInfo = {\r\n  currentPlayerID:string, \r\n  totalTileInBag:number,\r\n  players:ClientPlayer[],\r\n  lastWords:LastWord[],\r\n};\r\n\r\nexport type TileBoardCellPos = {[key:string]:TileType};\r\n\r\nexport type PlayedTileBoardCellPos = {[key:string]:string}\r\n\r\nexport type GamePayload = [GeneralInfo, TileType[], number];\r\n\r\nexport interface SelectedTileType{\r\n  id:string, diff:{y:number, x:number}\r\n};\r\n\r\nexport type TileType = {\r\n  letter:string,\r\n  point:number,\r\n  id:string,\r\n};\r\n\r\nexport interface QueryResponse{\r\n  loading:boolean,\r\n  data:any,\r\n  error:Error|null,\r\n  reQuery:(uri:string, option?:RequestOption)=>void\r\n};\r\n\r\n\r\nexport interface MutationResponse{\r\n  loading:boolean,\r\n  data:any,\r\n  error:Error|null\r\n};\r\n\r\nexport type METHOD = \"POST\" | \"GET\" | \"PUT\" | \"DELETE\";\r\nexport type MODE = \"no-cors\" | \"cors\" | \"same-origin\";\r\nexport type CACHE = \"default\" | \"no-cache\" | \"reload\" | \"force-cache\";\r\nexport type CREDENTIALS = \"omit\" | \"same-origin\" | \"include\";\r\nexport type HEADERS = {\"Content-type\":\"application/json\"|\"application/x-www-form-urlencoded\"};\r\n\r\nexport interface RequestOption {\r\n  method?:METHOD,\r\n  mode?:MODE\r\n  cache?:CACHE,\r\n  credentials?:CREDENTIALS,\r\n  headers?:HEADERS,\r\n  body?:string\r\n};\r\n\r\nexport type DoQuery = (\r\n  uri:string, \r\n  option:RequestOption, \r\n  setResponse:(response:QueryResponse)=>void, \r\n  ignoreResult:React.MutableRefObject<boolean>,\r\n  reQuery:(uri:string, option?:RequestOption)=>void,\r\n)=>void;\r\n\r\nexport type DoMutation = (\r\n  uri:string,\r\n\r\n)=>void","import React from 'react'\r\n\r\ninterface Props {\r\n  totalTileInBag:number\r\n}\r\n\r\nconst ScrabbleBag:React.FC<Props> = ({totalTileInBag}) => {\r\n  return (\r\n    <span style={{position:\"relative\"}}>\r\n      <img src=\"./img/scrabble-bag-2.jpg\" alt=\"scrabble bag\" style={{width:50, marginRight:15}}/>\r\n      <span\r\n        style={{\r\n          position: \"absolute\",\r\n          color: \"#a55694\",\r\n          fontSize: \"1.5em\",\r\n          left: \"12px\",\r\n          top: \"-20px\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n    >{totalTileInBag}</span>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default ScrabbleBag;","import React, { useRef, useEffect, useState } from 'react';\r\n\r\nimport WebSocketWrapper from '../../../lib/client-websocket-wrapper';\r\nimport { EVENT_TYPE } from '../../../lib/enum';\r\n\r\ninterface Props {\r\n  handleToggleDict:()=>void\r\n  ws:WebSocketWrapper\r\n};\r\n\r\nconst ACTION_TYPE = {\r\n  TYPING:1,\r\n  STOP_TYPING:2,\r\n};\r\n\r\n//const validCharReg = /\\S/;\r\n\r\nconst alphabeltReg = /^[a-z]+$/;\r\n\r\n// function isValidChar(char:string){\r\n//   return (validCharReg.test(char) && (['Backspace', 'Enter', 'Delete'].indexOf(char) < 0));\r\n// }\r\n\r\nexport const Dictionary:React.FC<Props> = ({handleToggleDict, ws}) => {\r\n  const [word, setWord] = useState(\"\");\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  \r\n  const [output, setOutput] = useState<string[]>([]);\r\n\r\n  const thisRef = useRef<{\r\n    word:string, \r\n    action:number,\r\n    timeoutID:NodeJS.Timeout|undefined\r\n  }>({\r\n    word:\"\", \r\n    action:ACTION_TYPE.STOP_TYPING,\r\n    timeoutID:undefined\r\n  });\r\n\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n  \r\n  //you\r\n  useEffect(()=>{\r\n    const onSearchWord:(data:{w:string, l:string})=>void = ({w:searchWord, l:matchList})=>{\r\n      \r\n      if(thisRef.current.word === searchWord){\r\n        const f = matchList === \"\" ? [] : matchList.split(\".\");\r\n        if(f.length > 0){\r\n          //On the server side i remove some part of the word to reduce\r\n          //the amount of data that is being transfer over the wire\r\n          //the formular i use is n.slice(0, (n.length - 1))\r\n          //where n is the search substring\r\n          searchWord = searchWord.slice(0, searchWord.length - 1);\r\n          setOutput(f.map(w=>(searchWord + w)));\r\n        }\r\n        else{\r\n          setOutput([`word(s) that match \"${searchWord}\" cannot be found`])\r\n        }\r\n        setIsTyping(false);\r\n      }//end if\r\n    };\r\n\r\n    ws.addEventListener(EVENT_TYPE.SEARCH_DICT, onSearchWord);\r\n\r\n    const _timeout = thisRef.current.timeoutID;\r\n    return ()=>{\r\n      ws.removeEventListener(EVENT_TYPE.SEARCH_DICT, onSearchWord);\r\n      if(_timeout){\r\n        clearTimeout(_timeout);\r\n      }\r\n    };\r\n    /*eslint-disable react-hooks/exhaustive-deps*/\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    \r\n    if(inputRef.current){\r\n      inputRef.current.focus();\r\n    }\r\n  });\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>)=>{\r\n    if(!isTyping) setIsTyping(true);\r\n    const word = event.target.value.trim();\r\n    thisRef.current.word = word;\r\n    setWord(word);\r\n  };\r\n\r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    // const key = event.key;\r\n    //if user have a conversation id as well asuser id then send action \r\n    \r\n    \r\n    if(thisRef.current.timeoutID) clearTimeout(thisRef.current.timeoutID);\r\n      //thisRef.current.action = ACTION_TYPE.TYPING;\r\n        thisRef.current.timeoutID = setTimeout(()=>{\r\n          \r\n          const word = thisRef.current.word;\r\n          thisRef.current.timeoutID = undefined;\r\n          if(word.length < 2){\r\n            setIsTyping(false);\r\n            setOutput([\"Type atleast two letter to check word in dictionary.\"]);\r\n          }\r\n          else if(!alphabeltReg.test(word)){\r\n            setIsTyping(false);\r\n            setOutput([`word(s) that match \"${word}\" cannot be found`]);\r\n          }\r\n          else{\r\n            ws.send(EVENT_TYPE.SEARCH_DICT, {w:word.toLocaleLowerCase()}, []);\r\n          }\r\n        }, 1000);//end set timeout\r\n  }//end onkeyup\r\n\r\n  return (\r\n    <div className=\"open-modal\">\r\n      <div className=\"modal-content\">\r\n        <div className=\"header\" style={{position:\"relative\"}}>\r\n          Dictionary <span className=\"close\" onClick={handleToggleDict}>&#x2613;</span>\r\n        </div>\r\n        <div className=\"body\">\r\n          <p>Type atleast <strong>two (2)</strong> alphabelt to search dictionary.</p>\r\n          <input type=\"text\" value={word} \r\n            placeholder=\"Search for words\" \r\n            onChange={handleChange}\r\n            onKeyUp = {onKeyUp}\r\n            ref={inputRef}\r\n            autoFocus\r\n          />\r\n          {\r\n            isTyping ? (\r\n              <p>Searching</p>\r\n            ) : (\r\n              <ul className=\"word-list\">\r\n                {\r\n                  output.map(w=><li key={w}>{w}</li>)\r\n                }\r\n              </ul>\r\n            )\r\n          }\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React, { useLayoutEffect} from \"react\";\r\nimport {createPortal} from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst div = document.createElement(\"div\");\r\n\r\nexport const Modal :React.FC<{children:React.ReactChild}> = ({children}) => {\r\n  /**\r\n   * I have to useLayoutEffect instead of useEffect cos the auto focus is not immediate when searching\r\n   * the dictionary thereby not capturing user typed letter on time.\r\n   */\r\n  useLayoutEffect(()=>{\r\n    \r\n    const modalRoot = document.getElementById(\"modal-root\");\r\n\r\n    if(modalRoot){\r\n      modalRoot.appendChild(div);\r\n    }\r\n\r\n    return ()=>{\r\n      if(modalRoot){\r\n        modalRoot.removeChild(div);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return createPortal(children, div);\r\n}","import React from 'react';\r\nimport { MEDAL_TYPE } from '../../../../declaration';\r\n\r\ninterface Props {\r\n  prizeAvatarUrl:string,\r\n  name:string,\r\n  score:number,\r\n  avatarAlt:string,\r\n  medalType:MEDAL_TYPE\r\n}\r\n\r\nexport const PrizeItem : React.FC<Props> = ({prizeAvatarUrl, name, score, avatarAlt, medalType}) => {\r\n  \r\n  const style :{left:number, top:number, height:number}  = (\r\n    medalType === MEDAL_TYPE.GOLD \r\n    ? {left:140, top:0, height:248} \r\n    : medalType === MEDAL_TYPE.SILVER \r\n    ? {left:0, top:10, height:238} \r\n    : {left:280, top:20, height:228}\r\n  );\r\n  \r\n  return (\r\n    <div \r\n      style={{\r\n        borderRadius: 10,\r\n        boxShadow: \"1px 1px 6px 1px rgba(0, 0, 0, 0.9)\",\r\n        position:\"absolute\",\r\n        left:style.left,\r\n        top:style.top,\r\n        width:122,\r\n        height:style.height\r\n      }}>\r\n      <p\r\n        style={{\r\n          textAlign:\"center\", \r\n          color: \"#fff\",\r\n          fontFamily: \"cursive\",\r\n          padding:4,\r\n        }}\r\n      >\r\n        {name}\r\n      </p>\r\n      <img src={prizeAvatarUrl} alt={avatarAlt} style={{width:\"inherit\"}}/>     \r\n      <p\r\n        style={{\r\n          padding: 5,\r\n          textAlign: \"center\",\r\n          margin: 5,\r\n          backgroundColor: \"#060607\",\r\n          borderRadius:10,\r\n          color:\"#64edcb\",\r\n          fontFamily:\"cursive\",\r\n        }}\r\n      >{score}</p>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport { PrizeItem } from './PrizeItem';\r\nimport { MEDAL_TYPE, PlayerPosition } from '../../../declaration';\r\n\r\ninterface MedalTypes {\r\n  prizeAvatarUrl:string,\r\n  avatarAlt:string,\r\n  medalType:MEDAL_TYPE\r\n};\r\n\r\ninterface Props {\r\n  players:PlayerPosition[],\r\n  goBackToHomePage:()=>void,\r\n};\r\n\r\nconst Medals :MedalTypes[] = [\r\n  {prizeAvatarUrl:\"./img/1st-pos.jpg\", avatarAlt:\"gold medal\", medalType:MEDAL_TYPE.GOLD},\r\n  {prizeAvatarUrl:\"./img/2nd-pos.jpg\", avatarAlt:\"silver medal\", medalType:MEDAL_TYPE.SILVER},\r\n  {prizeAvatarUrl:\"./img/3rd-pos.jpg\", avatarAlt:\"bronze medal\", medalType:MEDAL_TYPE.BRONZE},\r\n]\r\n\r\nexport const Prize:React.FC<Props> = ({players, goBackToHomePage}) => {\r\n  //ensure player is not more than\r\n  players = players.length > 3 ? players.slice(0, 3) : players;\r\n  \r\n  let index  = -1;\r\n  const medalStore : JSX.Element[]= [];\r\n  let player = null;\r\n\r\n  /**\r\n   * since the result already sorted according to player's score\r\n   * the player who got first will be the first item at index 0 \r\n   * but i want the player who got second who is at index 1 to be \r\n   * display first following the olympic style of awarding medal to participant\r\n   */\r\n  for(let i = 0; i < players.length; i++){\r\n    //let the silver medal position be display first followed by gold\r\n    //and then bronze\r\n    index = i === 0 ? 1 : i === 1 ? 0 : i;\r\n    //get player at index\r\n    player = players[index];\r\n    //push to array\r\n    medalStore.push(\r\n      <PrizeItem key={player.name} {...Medals[index]} {...player}/>\r\n    );\r\n  }\r\n\r\n  const twoPlayerWidth = players.length < 3 ? {width:330} : {};\r\n\r\n  return (\r\n    <div className=\"open-modal\">\r\n      <div className=\"modal-content\" style={{height:320, ...twoPlayerWidth}}>\r\n        <div className=\"header\" style={{position:\"relative\"}}>\r\n          Prize <span className=\"close\" onClick={goBackToHomePage}>&#x2613;</span>\r\n        </div>\r\n        <div className=\"body\"style={{position:\"relative\"}}>\r\n          {\r\n            medalStore\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState, useCallback, useRef } from \"react\";\r\nimport Player from \"./Player\";\r\nimport ScoreBoard from \"./ScoreBoard\";\r\nimport ScrabbleBoard from \"./ScrabbleBoard\";\r\nimport ScrabbleBag from \"./ScrabbleBag\";\r\nimport WebSocketWrapper from \"../../lib/client-websocket-wrapper\";\r\nimport { EVENT_TYPE } from \"../../lib/enum\";\r\nimport { GeneralInfo, TileType, GamePayload, PlayerPosition, TileBoardCellPos } from \"../../declaration\";\r\nimport {Dictionary } from \"./Dictionary\";\r\nimport {Modal} from \"../Modal\";\r\nimport { Prize } from \"./Prize\";\r\nimport { getPlayerOfflineMsg } from \"../../lib\";\r\n\r\ninterface Props{\r\n  ws:WebSocketWrapper,\r\n  defTiles:TileType[],\r\n  defGenInfo:GeneralInfo\r\n  defTick:number,\r\n  myUsername:string,\r\n  goBackToHomePage:()=>void,\r\n  defTileBoardCellPos:TileBoardCellPos,\r\n  offlinePlayers:string[]\r\n};\r\n\r\nconst Scrabble: React.FC<Props> = ({ws, defTick, defTiles, defGenInfo, myUsername, goBackToHomePage, defTileBoardCellPos, offlinePlayers})=>{\r\n  const [tick, setTick] = useState(defTick);\r\n  const [genInfoAndTiles, setGenInfoAndTiles] = useState<{tiles:TileType[], genInfo:GeneralInfo}>({\r\n    tiles:defTiles, genInfo:defGenInfo\r\n  });\r\n\r\n  const [toggleDict, setToggleDict] = useState(false);\r\n\r\n  const [playerPosition, setPlayerPosition] = useState<PlayerPosition[]>([]);\r\n\r\n  const showMsgRef = useRef<boolean>(true);\r\n\r\n  // const updateShowMsgRef = useCallback(()=>{\r\n  //   showMsgRef.current = false;\r\n  // }, []);\r\n  \r\n  useEffect(()=>{\r\n    //onTimer\r\n\r\n    const onClockTick: (payload:{t:number})=>void = ({t:tick})=>{\r\n      //console.log(tick);\r\n      setTick(tick);\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.CLOCK_TICK, onClockTick);\r\n\r\n    const onNextTurn :(gamePayload:GamePayload)=>void = (gamePayload)=>{\r\n      //console.log(gamePayload);\r\n      const [genInfo, tiles, tick] = gamePayload;\r\n      setTick(tick);\r\n      \r\n      showMsgRef.current = true;\r\n      console.log({showMsg:showMsgRef.current});\r\n      setGenInfoAndTiles({genInfo, tiles});\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.NEXT_TURN, onNextTurn);\r\n\r\n    const onGameOver:(data:{f:PlayerPosition[]})=>void = ({f:playerPosition})=>{\r\n      setPlayerPosition(playerPosition);\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.GAME_OVER, onGameOver);\r\n\r\n    return ()=>{\r\n      ws.removeEventListener(EVENT_TYPE.CLOCK_TICK, onClockTick);\r\n      ws.removeEventListener(EVENT_TYPE.NEXT_TURN, onNextTurn);\r\n      ws.removeEventListener(EVENT_TYPE.GAME_OVER, onGameOver);\r\n    };\r\n    /*eslint-disable react-hooks/exhaustive-deps*/\r\n  }, []);\r\n\r\n  const {genInfo, tiles} = genInfoAndTiles\r\n  //on\r\n  const isCurrentPlayer = myUsername === genInfo.currentPlayerID;\r\n\r\n  const handleToggleDict = useCallback(\r\n    ()=>setToggleDict(prevToggleDict=>!prevToggleDict), \r\n    [setToggleDict]\r\n  );\r\n\r\n  const arePlayerOffline = offlinePlayers.length > 0;\r\n  \r\n  return(\r\n    <section className=\"wrapper\">\r\n      <div className=\"score-board\">\r\n        {\r\n          genInfo.players.map(p=>(\r\n            <Player \r\n              key={p.username} \r\n              score={p.score} \r\n              isCurrentPlayer={p.username === genInfo.currentPlayerID}\r\n              tick={tick}\r\n              username={p.username}\r\n            />\r\n          ))\r\n        }\r\n        <ScoreBoard playerInputTracker={genInfo.lastWords}/>\r\n        <div style={{textAlign:\"center\", paddingTop:10}}>\r\n          <ScrabbleBag totalTileInBag={genInfo.totalTileInBag}/>\r\n          <img \r\n            src=\"./img/dictionary.jpg\" \r\n            alt=\"dict\" style={{width:50, cursor:\"pointer\"}} \r\n            onClick = {handleToggleDict}\r\n          />\r\n        </div>\r\n      </div>\r\n      <ScrabbleBoard \r\n        tiles={tiles} \r\n        ws={ws}\r\n        isCurrentPlayer={isCurrentPlayer}\r\n        msg={(\r\n          arePlayerOffline \r\n          ? getPlayerOfflineMsg(offlinePlayers) \r\n          : (\r\n            isCurrentPlayer ? \"Its your turn to play.\" : `${genInfo.currentPlayerID} is on turn to play.`\r\n          )\r\n        )}\r\n        arePlayerOffline={arePlayerOffline}\r\n        passed={isCurrentPlayer && ((tick - 1) < 0)}\r\n        defTileBoardCellPos={defTileBoardCellPos}\r\n        //showMsg={showMsgRef.current}\r\n        currentPlayerID={genInfo.currentPlayerID}\r\n        //updateShowMsgRef={updateShowMsgRef}\r\n      />\r\n      {\r\n        toggleDict ? (\r\n          <Modal>\r\n            <Dictionary handleToggleDict={handleToggleDict} ws={ws}/>\r\n          </Modal>\r\n        ) : null\r\n      }\r\n      {\r\n        playerPosition.length > 0 ? (\r\n          <Modal>\r\n            <Prize \r\n              players={playerPosition}\r\n              goBackToHomePage={goBackToHomePage}\r\n            />\r\n          </Modal>\r\n        ) : null\r\n      }\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Scrabble;","import React, { useEffect, useState } from 'react'\r\n\r\nimport { ROUTES } from '../../lib/enum';\r\n\r\ninterface Props {\r\n  changeRoute:(route:string)=>void,\r\n  msg:string\r\n}\r\n\r\nexport const FrontPage:React.FC<Props> = ({changeRoute, msg}) => {\r\n  const [stateMsg, setStateMsg] = useState(msg)\r\n  \r\n  useEffect(()=>{\r\n    const timeout = setTimeout(()=>{\r\n      setStateMsg(\"\");\r\n    }, 3000);\r\n\r\n    return ()=>{\r\n      clearTimeout(timeout);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"front-page\">\r\n      {\r\n        stateMsg ? <p style={{marginBottom: 10,fontFamily:\"cursive\"}}>{stateMsg}</p> : null\r\n      }\r\n      <button onClick = {()=>changeRoute(ROUTES.START_NEW_GAME)}>Start A Game</button>\r\n      <button onClick={()=>changeRoute(ROUTES.JOIN_GAME)}>Join A Game</button>\r\n    </div>\r\n  );\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { ROUTES, EVENT_TYPE } from '../../lib/enum';\r\nimport WebSocketWrapper from '../../lib/client-websocket-wrapper';\r\n\r\n\r\ninterface Props {\r\n  changeRoute:(route:string, data?:any)=>void\r\n  ws:WebSocketWrapper\r\n}\r\n\r\nexport const StartNewGame:React.FC<Props> = ({changeRoute, ws}) => {\r\n  \r\n  const [numPlayer, setNumPlayer] = useState<string>(\"\");\r\n  //const [serverResponse, setServerResponse] = useState<>\r\n  const [errored, setErrored] = useState(false);\r\n  \r\n  \r\n  useEffect(()=>{\r\n    const onGenerateGameSessionOffer :(payload:{s?:string, msg?:string})=>void = ({s:gameSessionID, msg})=>{\r\n      if(gameSessionID){\r\n        changeRoute(ROUTES.WAITING_FOR_ACCEPTANCE_OFFER, {gameSessionID});\r\n      }\r\n      else{\r\n        changeRoute(ROUTES.HOME, {msg});\r\n      }\r\n    };\r\n\r\n    ws.addEventListener(EVENT_TYPE.GENERATE_GAME_SESSION_OFFER_ID, onGenerateGameSessionOffer);\r\n\r\n    return ()=>{\r\n      ws.removeEventListener(EVENT_TYPE.GENERATE_GAME_SESSION_OFFER_ID, onGenerateGameSessionOffer);\r\n    }\r\n    \r\n  }, [changeRoute, ws]);\r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>)=>{\r\n    //prevent\r\n    event.preventDefault();\r\n    //convert string to number\r\n    const n = parseInt(numPlayer);\r\n    //if invalid input\r\n    if(Number.isInteger(n) && n > 1 && n < 5){\r\n      \r\n      //send request to server to generate new game session ID\r\n      ws.send(EVENT_TYPE.GENERATE_GAME_SESSION_OFFER_ID, {n}, []);\r\n    }\r\n    else{\r\n      //color instruction to red to draw attention to invalid input\r\n      setErrored(true)\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>)=>{\r\n    setNumPlayer(event.target.value);\r\n    setErrored(false);\r\n  }\r\n\r\n  \r\n  return (\r\n    <form className=\"start-game\" onSubmit={handleSubmit}>\r\n      <p style={{marginBottom: 10, color:errored ? \"red\" : \"#000\"}}>\r\n        Enter the number of player(s) that'll be involved in the game. \r\n        Must be minimum of 2 and maximum of 4\r\n      </p>\r\n      <p>\r\n        <label htmlFor=\"playerNumber\">Number of Player(s)</label>\r\n        <input type=\"text\" onChange={handleChange} value={numPlayer}/>\r\n        <br/>\r\n        <label htmlFor=\"\"style={{width: 114, display: \"inline-block\"}}>&nbsp;</label>\r\n        <input type=\"submit\" value=\"submit\" style={{marginTop:10}}/>\r\n        <button onClick={()=>changeRoute(ROUTES.HOME)} type=\"button\">Cancel</button>\r\n      </p>\r\n    </form>\r\n  );\r\n}","import React from 'react';\r\nimport \"./index.css\";\r\n\r\ninterface Props {\r\n  joinPlayer:string[]\r\n}\r\n\r\nexport const NewUserJoinGame :React.FC<Props> = ({joinPlayer}) => {\r\n  return (\r\n    <ul>\r\n      {\r\n        joinPlayer.map(\r\n          p=>(\r\n          <li key={p} className=\"player\">&#9977; {`${p} join game`}</li>\r\n        ))\r\n      }\r\n    </ul>\r\n  );\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { EVENT_TYPE, ROUTES } from '../../lib/enum';\r\nimport WebSocketWrapper from '../../lib/client-websocket-wrapper';\r\nimport { NewUserJoinGame } from '../NewPlayerJoinGame';\r\n\r\ninterface Props {\r\n  gameSessionID:string,\r\n  ws:WebSocketWrapper\r\n  changeRoute:(route:string, data?:any)=>void\r\n}\r\n\r\nexport const JoinGameTimeout:React.FC<Props> = ({ws, gameSessionID, changeRoute}) => {\r\n\r\n  const [joinGameList, setJoinGameList] = useState<string[]>([]);\r\n\r\n  useEffect(()=>{\r\n    /*eslint-disable react-hooks/exhaustive-deps*/\r\n    const newUserJoinGame :(payload:{u:string})=>void = ({u:justJoined})=>{\r\n      setJoinGameList((prevJoinList)=>(\r\n        prevJoinList.indexOf(justJoined) < 0 \r\n        ? prevJoinList.concat(justJoined) \r\n        : prevJoinList\r\n      ));\r\n    };\r\n\r\n    ws.addEventListener(EVENT_TYPE.JUST_JOINED_GAME, newUserJoinGame);\r\n\r\n    const onPlayGameRejection :()=>void = ()=>{\r\n      changeRoute(ROUTES.HOME, {msg:\"Offer to play rejected.\"});\r\n    };\r\n\r\n    ws.addEventListener(EVENT_TYPE.CANCEL_OFFER_TO_PLAY, onPlayGameRejection);\r\n\r\n    const onPlayerDisconnectBeforeGameStart :(playerID:string)=>void = (playerID)=>{\r\n      changeRoute(ROUTES.HOME, {msg:`Game cancelled cos ${playerID} went offline.`});\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.PLAYER_DISCONNECT_BEFORE_START, onPlayerDisconnectBeforeGameStart);\r\n\r\n    return ()=>{\r\n      ws.removeEventListener(EVENT_TYPE.JUST_JOINED_GAME, newUserJoinGame);\r\n      ws.removeEventListener(EVENT_TYPE.CANCEL_OFFER_TO_PLAY, onPlayGameRejection);\r\n      ws.removeEventListener(EVENT_TYPE.PLAYER_DISCONNECT_BEFORE_START, onPlayerDisconnectBeforeGameStart);\r\n    }\r\n  }, [])\r\n\r\n  const cancelPlayOffer = ()=>{\r\n    ws.send(EVENT_TYPE.CANCEL_OFFER_TO_PLAY, {s:gameSessionID}, []);  \r\n    changeRoute(ROUTES.HOME);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"front-page\" style={{width:500}}>\r\n      <p className=\"instruction\" style={{marginBottom:10}}>\r\n        Give the other player(s) game session ID\r\n        <strong className=\"game-session-id\">{` ${gameSessionID} `}</strong> \r\n        to join game.\r\n      </p>\r\n      <p className=\"instruction\" style={{marginBottom:10}}>\r\n        waiting for other player(s) to join game...\r\n      </p>  \r\n      <NewUserJoinGame joinPlayer={joinGameList}/>\r\n      <button style={{marginRight:0}} onClick={cancelPlayOffer}>Cancel</button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { ROUTES } from '../../lib/enum';\r\nimport {EVENT_TYPE} from \"../../lib/enum\";\r\nimport WebSocketWrapper from '../../lib/client-websocket-wrapper';\r\nimport { NewUserJoinGame } from '../NewPlayerJoinGame';\r\n\r\n\r\ninterface Props {\r\n  changeRoute:(route:string, data:any)=>void\r\n  ws:WebSocketWrapper\r\n}\r\n\r\nexport const JoinGame:React.FC<Props> = ({changeRoute, ws}) => {\r\n  const [joinGameList, setJoinGameList] = useState<string[]>([]);\r\n  const [gameSessionID, setGameSessionID] = useState(\"\");\r\n  const [errored, setErrored] = useState(false);\r\n  const joinGameRef = useRef(false);\r\n\r\n  useEffect(()=>{\r\n    /*eslint-disable react-hooks/exhaustive-deps*/\r\n    const joinGameResponse :(payload :{m:string})=>void = ({m:msg})=>{\r\n      changeRoute(ROUTES.HOME, {msg})\r\n    }\r\n    ws.addEventListener(EVENT_TYPE.JOIN_GAME_RESPONSE, joinGameResponse);\r\n\r\n    const alreadyJoinList :(payload :{u:string[]})=>void = ({u:joinList})=>{\r\n      joinGameRef.current = true;\r\n      setJoinGameList(joinList);\r\n    }\r\n    ws.addEventListener(EVENT_TYPE.ALREADY_JOINED_GAME, alreadyJoinList);\r\n\r\n    const newUserJoinGame :(payload:{u:string})=>void = ({u:justJoined})=>{\r\n      setJoinGameList((prevJoinList)=>(\r\n        prevJoinList.indexOf(justJoined) < 0 \r\n        ? prevJoinList.concat(justJoined) \r\n        : prevJoinList\r\n      ));\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.JUST_JOINED_GAME, newUserJoinGame);\r\n\r\n    const onCancelOfferToPlay: ()=>void = ()=>{\r\n      changeRoute(ROUTES.HOME, {msg:\"Offer to play was cancelled\"});\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.CANCEL_OFFER_TO_PLAY, onCancelOfferToPlay);\r\n\r\n    const onPlayerDisconnectBeforeGameStart :(playerID:string)=>void = (playerID)=>{\r\n      changeRoute(ROUTES.HOME, {msg:`Game cancelled cos ${playerID} went offline.`});\r\n    };\r\n    ws.addEventListener(EVENT_TYPE.PLAYER_DISCONNECT_BEFORE_START, onPlayerDisconnectBeforeGameStart);\r\n\r\n    return ()=>{\r\n      ws.removeEventListener(EVENT_TYPE.JOIN_GAME_RESPONSE, joinGameResponse);\r\n      ws.removeEventListener(EVENT_TYPE.ALREADY_JOINED_GAME, alreadyJoinList);\r\n      ws.removeEventListener(EVENT_TYPE.JUST_JOINED_GAME, newUserJoinGame);\r\n      ws.removeEventListener(EVENT_TYPE.CANCEL_OFFER_TO_PLAY, onCancelOfferToPlay);\r\n      ws.removeEventListener(EVENT_TYPE.PLAYER_DISCONNECT_BEFORE_START, onPlayerDisconnectBeforeGameStart);\r\n    };\r\n  }, []);\r\n\r\n  \r\n\r\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>)=>{\r\n    \r\n    //prevent\r\n    event.preventDefault();\r\n    //if invalid input\r\n    if(gameSessionID.length > 2){\r\n      //send request to server to generate new game session ID\r\n      ws.send(EVENT_TYPE.JOIN_GAME, {g:gameSessionID.trim()}, [])\r\n    }\r\n    else{\r\n      //color instruction to red to draw attention to invalid input\r\n      setErrored(true)\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>)=>{\r\n    setGameSessionID(event.target.value);\r\n    setErrored(false);\r\n  }\r\n\r\n  const cancelJoinOffer = () => {\r\n    //if already join but decided to cancel\r\n    if(joinGameRef.current){\r\n      ws.send(EVENT_TYPE.CANCEL_OFFER_TO_PLAY, {}, []);\r\n    }\r\n    changeRoute(ROUTES.HOME, {});\r\n  };\r\n\r\n  return (\r\n    <form className=\"start-game\" onSubmit={handleSubmit}>\r\n      <NewUserJoinGame joinPlayer={joinGameList}/>\r\n      <p style={{marginBottom: 10, color:errored ? \"red\" : \"#000\"}}>\r\n        Enter the game session id to join game.\r\n      </p>\r\n      <p>\r\n        {\r\n          joinGameRef.current ? (null) : (\r\n            <>\r\n              <label htmlFor=\"playerNumber\">Game Session ID </label>\r\n              <input type=\"text\" onChange={handleChange} value={gameSessionID}/><br/>\r\n              <label htmlFor=\"\"style={{width: 114, display: \"inline-block\"}}>&nbsp;</label>\r\n              <input type=\"submit\" value=\"submit\" style={{marginTop:10}}/>\r\n            </>\r\n          )\r\n        }\r\n        <button onClick={cancelJoinOffer} type=\"button\">Cancel</button>\r\n      </p>\r\n    </form>\r\n  );\r\n}","import React, {useRef, useEffect, useState, useCallback} from 'react';\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport WebSocketWrapper from '../lib/client-websocket-wrapper';\r\n\r\nimport {DisplayMsg} from \"../DisplayMsg\";\r\n\r\nimport Scrabble from \"./scrabble\" ;\r\nimport {FrontPage} from \"./FrontPage\";\r\n\r\nimport {wsUrl} from \"../lib\";\r\nimport { EVENT_TYPE, ROUTES } from '../lib/enum';\r\nimport { StartNewGame } from './StartNewGame';\r\nimport { JoinGameTimeout } from './JoinGameTimeout';\r\nimport { JoinGame } from './JoinGame';\r\nimport { MsgType, GamePayload, TileBoardCellPos} from '../declaration';\r\n\r\ninterface ThisRef{\r\n  ws:WebSocketWrapper|null,\r\n  alreadyConnectedAndLoggedOut:boolean,\r\n};\r\n\r\ninterface Props {\r\n  setIsOnline:React.Dispatch<React.SetStateAction<boolean>>,\r\n  handleLogOut:()=>void,\r\n  isOnline:boolean,\r\n  myUsername:string,\r\n}\r\n\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport const Main:React.FC<Props> = ({setIsOnline, handleLogOut, isOnline, myUsername}) => {\r\n  \r\n  const [route, setRoute] = useState<{\r\n    path:string, \r\n    data:any\r\n  }>({path:ROUTES.HOME, data:{}});\r\n\r\n  const [msgDialog, setMsgDialog] = useState<{msg:string, type:MsgType} | null>(null);\r\n  //hold all object on ref\r\n  const thisRef = useRef<ThisRef>({\r\n    ws:null, \r\n    alreadyConnectedAndLoggedOut:false, \r\n  });\r\n  //useQuery()\r\n  //get websocket object\r\n  useEffect(()=>{\r\n    /**\r\n     * websocket start here\r\n     */\r\n    //get websocket object\r\n    const ws = new WebSocketWrapper();\r\n    //add event handler to open\r\n    ws.addEventListener(WebSocketWrapper.EVENT_TYPE.OPEN, (event: any)=>{\r\n      //log for debugging\r\n      //show that this user is now online\r\n      setIsOnline(true);\r\n    });\r\n\r\n    //add event to close\r\n    ws.addEventListener(WebSocketWrapper.EVENT_TYPE.CLOSE, (event:any)=>{\r\n      //if playing game and the client disconnect and reconnect\r\n      //if the game has not been deleted by server\r\n      //event will be manually sent to client to continue game\r\n      goBackToHomePage();\r\n      //indicate that user is currently offline\r\n      setIsOnline(false);\r\n    });\r\n\r\n    ws.addEventListener(WebSocketWrapper.EVENT_TYPE.ERROR, (event:any)=>{\r\n      //if online set to false, automatically react will not re-render\r\n      //if its already false\r\n      setIsOnline(false);\r\n      /**\r\n      * I don't want to set error message when reconnection attempt take place\r\n      */\r\n      if(ws.getTotalReconnectionAttempt() === 0 && ws.isClosed()){\r\n        setMsgDialog({msg:\"Unable to connect to the realtime server\", type:\"ERROR\"});\r\n      }\r\n    });\r\n\r\n    ws.addEventListener(WebSocketWrapper.EVENT_TYPE.MSG_ERROR, (event:any)=>{\r\n      console.error(event);\r\n    });\r\n\r\n    //user defined event\r\n    //user already connected with this ws but connect with another\r\n    //only need one ws for each client, will transfer to new ws\r\n    ws.addEventListener(EVENT_TYPE.ALREADY_CONNECTED, ()=>{\r\n      thisRef.current.alreadyConnectedAndLoggedOut = true;\r\n      ws.closed = true;\r\n      //log user out\r\n      handleLogOut();\r\n    });\r\n    \r\n    ws.addEventListener(EVENT_TYPE.START_GAME, function startGame(data:GamePayload){\r\n      history.replace(ROUTES.GAME, {\r\n        genInfo:data[0], \r\n        tiles:data[1], \r\n        tick:data[2], \r\n        defTileBoardCellPos:{},\r\n        offlinePlayers:[],\r\n      });\r\n    });\r\n\r\n    ws.addEventListener(EVENT_TYPE.I_JOIN_GAME_AFTER_DISCONNECT, (payload:[GamePayload, TileBoardCellPos, string[]])=>{\r\n      history.replace(ROUTES.GAME, {\r\n        genInfo:payload[0][0], \r\n        tiles:payload[0][1], \r\n        tick:payload[0][2], \r\n        defTileBoardCellPos:payload[1],\r\n        offlinePlayers:payload[2]\r\n      });\r\n    })\r\n\r\n    //try to connect to the server websocket server\r\n    ws.connect(wsUrl, 1, 10, false);\r\n    \r\n    //save ws in ref for later use\r\n    thisRef.current.ws = ws;\r\n    \r\n    /**\r\n     * websocket end here\r\n     */\r\n\r\n    /**\r\n     * Routing start here\r\n     */\r\n    \r\n    //no need to check if the route and pathname are the same or not\r\n    //if they are the same set state will not re render\r\n    //setRoute(pathname);\r\n    \r\n    // Listen for changes to the current location.\r\n    const unlisten = history.listen((location, action) => {\r\n      //get pathname\r\n      const {pathname, state} = location;\r\n      // location is an object like window.location\r\n      //no need to check if the route and pathname are the same or not\r\n      //if they are the same set state will not re render\r\n      setRoute({path:pathname, data:state});\r\n    });\r\n    // Get the current location pathname.\r\n    const { pathname }= history.location;\r\n    //debug\r\n    //if there is a refresh of page while waiting for other player \r\n    //to join game, the game will be terminated anyway, return client\r\n    //to home page\r\n    if(pathname === ROUTES.WAITING_FOR_ACCEPTANCE_OFFER || pathname === ROUTES.GAME){\r\n      history.replace(ROUTES.HOME, {});\r\n    }else{\r\n      history.replace(pathname, {});\r\n    }\r\n    \r\n    //history.replace(ROUTES.GAME, {});\r\n\r\n    /**\r\n     * Routing ends here\r\n     */\r\n\r\n    /*eslint-disable react-hooks/exhaustive-deps*/\r\n    //when unmounting close connection to server\r\n    return ()=>{\r\n      //only close web\r\n      if(!thisRef.current.alreadyConnectedAndLoggedOut){\r\n        ws.close();\r\n      }\r\n      unlisten();\r\n    };\r\n  }, []);\r\n\r\n\r\n  const changeRoute = (route:string, data:any={}) :void=> {\r\n    history.replace(route, data);\r\n  }\r\n\r\n  const goBackToHomePage = useCallback(()=>{\r\n    changeRoute(ROUTES.HOME, {});\r\n  }, [changeRoute]);\r\n\r\n  let stump = null;\r\n\r\n  if(thisRef.current.ws && !thisRef.current.ws.isClosed()){\r\n\r\n    const {path} = route;\r\n    if (path === ROUTES.HOME){\r\n      const {data} = route;\r\n      stump = (\r\n        <FrontPage changeRoute={changeRoute} msg={data.msg ? data.msg : \"\"}/>\r\n      );\r\n    } \r\n  \r\n    else if(path === ROUTES.GAME){\r\n      const {genInfo, tiles, tick, defTileBoardCellPos, offlinePlayers} = route.data;\r\n      //stump = null;\r\n      stump = (\r\n        <Scrabble \r\n          ws={thisRef.current.ws} \r\n          defGenInfo={genInfo} \r\n          defTiles={tiles}\r\n          defTick={tick}\r\n          myUsername = {myUsername}\r\n          goBackToHomePage={goBackToHomePage}\r\n          defTileBoardCellPos={defTileBoardCellPos}\r\n          offlinePlayers={offlinePlayers}\r\n        />\r\n      );\r\n    }\r\n  \r\n    else if(path === ROUTES.START_NEW_GAME){\r\n      stump = (\r\n        <StartNewGame \r\n          changeRoute={changeRoute} \r\n          ws = {thisRef.current.ws}\r\n        />\r\n      )\r\n    }\r\n  \r\n    else if(path === ROUTES.WAITING_FOR_ACCEPTANCE_OFFER){\r\n      const {gameSessionID} = route.data;\r\n      stump = (\r\n        <JoinGameTimeout \r\n          changeRoute={changeRoute}\r\n          ws = {thisRef.current.ws}\r\n          gameSessionID={gameSessionID}\r\n        />\r\n      )\r\n    }//end else if(route === ROUTES.WAITING_FOR_ACCEPTANCE_OFFER)\r\n  \r\n    else if(path === ROUTES.JOIN_GAME){\r\n      stump = (\r\n        <JoinGame \r\n          changeRoute={changeRoute} \r\n          ws = {thisRef.current.ws}\r\n        />\r\n      )\r\n    }//end if(route === ROUTES.JOIN_GAME)\r\n\r\n    else{\r\n      stump = (\r\n        <div>Not Found</div>\r\n      );\r\n    }//end else\r\n  }\r\n  \r\n  else if(msgDialog){\r\n    stump = (\r\n      <DisplayMsg msg={msgDialog.msg} type={msgDialog.type}/>\r\n    )\r\n  }\r\n\r\n  else if(!isOnline){\r\n    return <DisplayMsg msg = \"You are currently Offline.\" type=\"WARNING\"/>\r\n  }\r\n\r\n  return stump;\r\n}","import React, {useState} from 'react';\n\nimport {Header} from \"./Header\";\n\nimport { DisplayMsg } from './DisplayMsg';\nimport { Login } from './Login';\nimport { useQuery } from './hooks';\nimport {indexUrl} from \"./lib\"\nimport {URL} from \"./lib/enum\"\nimport query from \"./query\";\nimport { Main } from './Main';\n\nconst App: React.FC = () => {\n  //set \n  const [isOnline, setIsOnline] = useState(false);\n  //const [loggedIn, setIsLoggedIn] = useState(false);\n  const [response, setResponse] = useQuery((indexUrl + URL.viewer), query.viewer);\n\n  const {loading, error, data, reQuery} = response;\n\n  const updateUsername = (username:string)=>{\n    setResponse({reQuery:response.reQuery, loading:false, error:null, data:{success:true, msg:\"\", username}})\n  };\n\n  const logOut = ()=>{\n    reQuery(indexUrl + URL.logOut, query.logOut);\n  }\n  \n  \n  if(loading){\n    return <div>Loading</div>\n  }\n  \n  else if(error){\n    return <DisplayMsg msg={error.message} type=\"ERROR\"/>\n  }\n\n  \n  const loggedIn = !!data.username;\n\n  return (\n    <div className=\"App\">\n      <Header isOnline={isOnline} loggedIn={loggedIn} handleLogOut={logOut} username={loggedIn ? data.username : \"\"}/>\n      {\n        loggedIn ? (\n          <Main setIsOnline={setIsOnline} handleLogOut={logOut} isOnline={isOnline} myUsername={data.username}/>\n        ) : (\n          <Login updateUsername={updateUsername}/>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}